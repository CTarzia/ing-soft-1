

----STARTUP---- (31 October 2019 20:58:24) as /home/chiara/Documents/UBA/ing-soft-1/imagen nueva/CuisUniversity-3938.image!


----End fileIn of /home/chiara/Documents/UBA/ing-soft-1/2019-2c/25-TusLibros/Iteracion1/TusLibros-18.st----!
!Cart methodsFor: 'initialization' stamp: 'gc 10/31/2019 21:00:38' prior: 50777395!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 10/31/2019 21:00:55'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'gc 10/31/2019 21:02:05'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'gc 10/31/2019 21:03:52'!
test01cashierCantCheckOutEmptyCart
	|cart cashier|
	cart _ Cart new.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:06:03'!
setup
	"^ Cart acceptingItemsOf: "! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:07:17' prior: 50777594!
setup
	^ Cart acceptingItemsOf: self defaultCatalog.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:07:38'!
defaultCatalog
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:07:56'!
itemSellByTheStore
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:09:34' prior: 50777604!
defaultCatalog
	^ Dictionary newFrom:  {self itemSellByTheStore -> 10}! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:10:00' prior: 50777614!
defaultCatalog
	^ Dictionary newFrom:  {self itemSellByTheStore -> (10*peso) }.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:10:34' prior: 50777599!
setup
	^ Cart acceptingItemsOf: self defaultCatalog keys ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:10:48' prior: 50777589!
test01cashierCantCheckOutEmptyCart
	! !

TestCase subclass: #CashierTest
	instanceVariableNames: ' cart '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'gc 10/31/2019 21:11:05'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:11:17' prior: 50777626!
setup
	cart _ Cart acceptingItemsOf: self defaultCatalog keys ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 10/31/2019 21:12:56'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:12:50' prior: 50777631!
test01cashierCantCheckOutEmptyCart
	| cashier |
	cashier _ Cashier acceptingFrom: self defaultCatalog ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:13:15' prior: 50777659!
test01cashierCantCheckOutEmptyCart
	| cashier |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:14:09' prior: 50777666!
test01cashierCantCheckOutEmptyCart
	| cashier |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog.
	cashier checkout: cart.
	! !

----SNAPSHOT----(31 October 2019 21:16:52) CuisUniversity-3938.image priorSource: 14319118!

----QUIT----(31 October 2019 21:16:59) CuisUniversity-3938.image priorSource: 14272935!

----STARTUP---- (31 October 2019 21:17:36) as /home/chiara/Documents/UBA/ing-soft-1/imagen nueva/CuisUniversity-3938.image!


Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 10/31/2019 21:18:04'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 10/31/2019 21:18:12'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(31 October 2019 21:18:25) CuisUniversity-3938.image priorSource: 14273028!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:23:03' prior: 50777673!
test01cashierCantCheckOutEmptyCart
	| cashier |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog.
	
	self 
		should: [ cashier checkout: cart.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:24:06' prior: 50777714!
test01cashierCantCheckOutEmptyCart
	| cashier |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog.
	
	self 
		should: [ cashier checkout: cart.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:24:08'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 10/31/2019 21:24:17'!
acceptingItemsOf: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 10/31/2019 21:24:25' prior: 50777743!
acceptingItemsOf: aDictionary 
	^self new initializeAcceptingItemsOf: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 10/31/2019 21:24:39' prior: 50777752!
acceptingItemsOf: aCatalog 
	^self new initializeAcceptingItemsOf: aCatalog ! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:24:41'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 10/31/2019 21:25:04'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'gc 10/31/2019 21:25:04'!
initializeAcceptingItemsOf: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cashier methodsFor: 'initialization' stamp: 'gc 10/31/2019 21:25:10' prior: 50777773!
initializeAcceptingItemsOf: aCatalog 
	catalog := aCatalog.! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:25:19'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:25:30'!
checkout: anUndefinedObject 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:26:16' prior: 50777787!
checkout: aCart 
	^ self class emptyCartErrorMessage! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:26:18'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'gc 10/31/2019 21:26:42'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'gc 10/31/2019 21:27:00' prior: 50777800!
emptyCartErrorMessage
	^'No se puede hacer checkout de carritos vacios'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:27:26' prior: 50777792!
checkout: aCart 
	^ self error: Cashier emptyCartErrorMessage! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:27:29'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:27:29'!
PASSED!

----SNAPSHOT----(31 October 2019 21:27:38) CuisUniversity-3938.image priorSource: 14273909!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:31:00' prior: 50777728!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog.
	
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:31:06'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:31:19'!
checkout: anUndefinedObject with: anUndefinedObject2 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:31:51' prior: 50777842!
checkout: aCart with: aCreditCard 
	^ self error: Cashier emptyCartErrorMessage! !

!methodRemoval: Cashier #checkout: stamp: 'gc 10/31/2019 21:31:54'!
checkout: aCart 
	^ self error: Cashier emptyCartErrorMessage!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:32:02'!
PASSED!

----SNAPSHOT----(31 October 2019 21:32:12) CuisUniversity-3938.image priorSource: 14277482!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:34:44'!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog.

	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:35:21' prior: 50777864!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore .
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:36:21'!
cashierDefaultCatalog
	^ Dictionary newFrom:  {self itemSellByTheStore -> (10*peso) }.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:37:08'!
cartDefaultCatalog
	^ Array with: self itemSellByTheStore.! !

!methodRemoval: CashierTest #defaultCatalog stamp: 'gc 10/31/2019 21:37:13'!
defaultCatalog
	^ Dictionary newFrom:  {self itemSellByTheStore -> (10*peso) }.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:37:23' prior: 50777647!
setup
	cart _ Cart acceptingItemsOf: self cartDefaultCatalog ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:37:30' prior: 50777826!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self cashierDefaultCatalog .
	
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:37:43' prior: 50777878!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self cashierDefaultCatalog .
	cart add: self itemSellByTheStore .
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:38:31' prior: 50777899!
cartDefaultCatalog
	^ Array with: self itemSellByTheStore with: self itemInCartCatalogNotInCashierCatalog.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:38:46'!
itemInCartCatalogNotInCashierCatalog
	^'item'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:39:03' prior: 50777950!
itemInCartCatalogNotInCashierCatalog
	^'inCart'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:39:12' prior: 50777955!
itemInCartCatalogNotInCashierCatalog
	^'inCartNotInCashier'! !

----SNAPSHOT----(31 October 2019 21:39:54) CuisUniversity-3938.image priorSource: 14278715!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:41:09' prior: 50777929!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self cashierDefaultCatalog .
	cart add: self itemInCartCatalogNotInCashierCatalog .
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:41:28' prior: 50777968!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self cashierDefaultCatalog .
	cart add: self itemInCartCatalogNotInCashierCatalog .
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier itemNotInCatalogErrorMessage. ]! !

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:41:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:42:06' prior: 50777984!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self cashierDefaultCatalog .
	cart add: (self itemInCartCatalogNotInCashierCatalog) .
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier itemNotInCatalogErrorMessage. ]! !

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:42:09'!
ERROR!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:42:20'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:42:20'!
ERROR!

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:42:20'!
ERROR!

TestCase subclass: #CashierTest
	instanceVariableNames: 'cart'
	classVariableNames: 'cart'
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierTest
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'gc 10/31/2019 21:43:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 10/31/2019 21:43:14'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:43:14'!
ERROR!

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:43:14'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 10/31/2019 21:44:02'!
setUp
	cart _ Cart acceptingItemsOf: self cartDefaultCatalog ! !

!methodRemoval: CashierTest #setup stamp: 'gc 10/31/2019 21:44:02'!
setup
	cart _ Cart acceptingItemsOf: self cartDefaultCatalog !

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:44:04'!
ERROR!

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:44:04'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'gc 10/31/2019 21:44:22'!
itemNotInCatalogErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'gc 10/31/2019 21:55:07' prior: 50778075!
itemNotInCatalogErrorMessage
	^'No se puede hacer checkout de este carrito porque tiene elementos que no estan en el catalogo del cajero'! !

!testRun: #CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 10/31/2019 21:55:09'!
FAILURE!

----SNAPSHOT----(31 October 2019 21:56:40) CuisUniversity-3938.image priorSource: 14282046!

----QUIT----(31 October 2019 21:56:58) CuisUniversity-3938.image priorSource: 14286081!

----STARTUP---- (4 November 2019 19:04:32) as /home/gzeitoune/Documents/UBA/ingSoft1/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!


!methodRemoval: CashierTest #test02cashierCantCheckOutItemIfItIsntInItsCatalog stamp: 'gc 11/4/2019 19:08:33'!
test02cashierCantCheckOutItemIfItIsntInItsCatalog
	| cashier creditCard |
	cashier _ Cashier acceptingItemsOf: self cashierDefaultCatalog .
	cart add: (self itemInCartCatalogNotInCashierCatalog) .
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier itemNotInCatalogErrorMessage. ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:09:15'!
defaultCatalog
	^ Dictionary newFrom:  {self itemSellByTheStore -> (10*peso) }.! !

!methodRemoval: CashierTest #cashierDefaultCatalog stamp: 'gc 11/4/2019 19:09:19'!
cashierDefaultCatalog
	^ Dictionary newFrom:  {self itemSellByTheStore -> (10*peso) }.!

!methodRemoval: CashierTest #cartDefaultCatalog stamp: 'gc 11/4/2019 19:09:20'!
cartDefaultCatalog
	^ Array with: self itemSellByTheStore with: self itemInCartCatalogNotInCashierCatalog.!

!methodRemoval: CashierTest #itemInCartCatalogNotInCashierCatalog stamp: 'gc 11/4/2019 19:09:27'!
itemInCartCatalogNotInCashierCatalog
	^'inCartNotInCashier'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:09:34' prior: 50778059!
setUp
	cart _ Cart acceptingItemsOf: self defaultCatalog ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:09:42' prior: 50777915!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard |
	cashier _ Cashier.
	
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:11:35' prior: 50778144!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard date|
	date _ self today .

	cashier _ Cashier with: cart on: date with: creditCard.
	
	self 
		should: [ cashier checkout: cart with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:11:48' prior: 50778156!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard date|
	date _ self today .

	cashier _ Cashier with: cart on: date with: creditCard.
	
	self 
		should: [ cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:11:59'!
ERROR!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:11:59'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:12:19' prior: 50778170!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard date|
	date _ Date today .

	cashier _ Cashier with: cart on: date with: creditCard.
	
	self 
		should: [ cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:12:22'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:12:29'!
with: aCart on: aDate with: anUndefinedObject 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aCart on: aDate with: anUndefinedObject ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:12:45' prior: 50778206!
with: aCart on: aDate with: anUndefinedObject 
	^self new initializeWith: aCart on: aDate with: anUndefinedObject ! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:12:50'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 11/4/2019 19:13:04'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 11/4/2019 19:13:04'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 11/4/2019 19:13:04'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog cart date undefinedObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'gc 11/4/2019 19:13:04'!
initializeWith: aCart on: aDate with: anUndefinedObject 
	self shouldBeImplemented.
	cart := aCart.
	date := aDate.
	undefinedObject := anUndefinedObject.! !
!Cashier methodsFor: 'initialization' stamp: 'gc 11/4/2019 19:13:18' prior: 50778247!
initializeWith: aCart on: aDate with: aCreditCard 
	cart := aCart.
	date := aDate.
	undefinedObject := aCreditCard.! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:13:21'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:13:30'!
checkout
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:13:35' prior: 50778265!
checkout
	! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:13:39'!
FAILURE!

!methodRemoval: Cashier class #acceptingItemsOf: stamp: 'gc 11/4/2019 19:13:53'!
acceptingItemsOf: aCatalog 
	^self new initializeAcceptingItemsOf: aCatalog !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:14:06' prior: 50778216!
with: aCart on: aDate with: aCreditCard 
	^self new initializeWith: aCart on: aDate with: aCreditCard ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:14:23' prior: 50778270!
checkout
	^ self error: Cashier emptyCartErrorMessage! !

!methodRemoval: Cashier #checkout:with: stamp: 'gc 11/4/2019 19:14:29'!
checkout: aCart with: aCreditCard 
	^ self error: Cashier emptyCartErrorMessage!

!methodRemoval: Cashier #initializeAcceptingItemsOf: stamp: 'gc 11/4/2019 19:14:38'!
initializeAcceptingItemsOf: aCatalog 
	catalog := aCatalog.!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:14:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 19:14:46'!
PASSED!

Object subclass: #Cashier
	instanceVariableNames: 'cart date aCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cashier
	instanceVariableNames: 'cart date creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 11/4/2019 19:15:17'!
Object subclass: #Cashier
	instanceVariableNames: 'cart date creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'gc 11/4/2019 19:15:26' prior: 50778255!
initializeWith: aCart on: aDate with: aCreditCard 
	cart := aCart.
	date := aDate.
	creditCard := aCreditCard.! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:15:30'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'gc 11/4/2019 19:16:09' prior: 50777534!
defaultCatalog
	
	^ Dictionary newFrom:  {self itemSellByTheStore -> (10*peso) }.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 19:16:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 19:16:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 19:16:14'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 19:16:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 19:16:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 19:16:14'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 19:16:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 19:16:14'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 19:16:18'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'gc 11/4/2019 19:16:56' prior: 50777382!
assertIsValidItem: anItem

	(catalog keys includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 19:16:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 19:17:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 19:17:00'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'gc 11/4/2019 19:17:35'!
itemNotSoldByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:17:35' prior: 50777462!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:17:35' prior: 50777504!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'gc 11/4/2019 19:17:35'!
itemNotSellByTheStore
	
	^'invalidBook'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01'!
itemSoldByTheStore
	^ 'validBook'! !
!CartTest methodsFor: 'support' stamp: 'gc 11/4/2019 19:18:01'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50777497!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50778358!
defaultCatalog
	
	^ Dictionary newFrom:  {self itemSoldByTheStore -> (10*peso) }.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50777489!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50777449!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50777475!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart occurrencesOf: self itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50777517!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByTheStore.
	self assert: (cart includes: self itemSoldByTheStore)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:18:01' prior: 50778117!
defaultCatalog
	^ Dictionary newFrom:  {self itemSoldByTheStore -> (10*peso) }.! !

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'gc 11/4/2019 19:18:01'!
itemSellByTheStore
	^ 'validBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'gc 11/4/2019 19:18:01'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 19:18:09'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:18:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:19:03' prior: 50778190!
test01cashierCantCheckOutEmptyCart
	| cashier creditCard date|
	date _ Date today .

	cashier _ Cashier with: cart on: date with: creditCard.
	
	self 
		should: [ cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:19:28' prior: 50778565!
test01cashierCantCheckOutEmptyCart
	| creditCard date|
	date _ Date today .

	self 
		should: [ Cashier with: cart on: date with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage. ]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:19:32'!
FAILURE!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:22:25'!
FAILURE!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:22:25'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:23:28' prior: 50778282!
with: aCart on: aDate with: aCreditCard 
	^self error: self emptyCartErrorMessage .
	"^self new initializeWith: aCart on: aDate with: aCreditCard "! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:23:30'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:23:35'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:28:20' prior: 50778579!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook|
	salesBook _ OrderedCollection new.
	date _ Date today .

	self 
		should: [ Cashier with: cart on: date with: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:28:23'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:28:23'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:28:43' prior: 50778615!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook|
	salesBook _ OrderedCollection new.
	date _ Date today .

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:29:43' prior: 50778636!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today .

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:29:51'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:30:32'!
with: aCart on: aDate with: aCreditCard registeringOn: aSalesBook
	^self error: self emptyCartErrorMessage .
	"^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook "! !

!methodRemoval: Cashier class #with:on:with: stamp: 'gc 11/4/2019 19:30:35'!
with: aCart on: aDate with: aCreditCard 
	^self error: self emptyCartErrorMessage .
	"^self new initializeWith: aCart on: aDate with: aCreditCard "!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 11/4/2019 19:31:08'!
Object subclass: #Cashier
	instanceVariableNames: 'cart date creditCard salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'gc 11/4/2019 19:31:02'!
initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook
	cart := aCart.
	date := aDate.
	creditCard := aCreditCard.
	salesBook := aSalesBook.! !

!methodRemoval: Cashier #initializeWith:on:with: stamp: 'gc 11/4/2019 19:31:11'!
initializeWith: aCart on: aDate with: aCreditCard 
	cart := aCart.
	date := aDate.
	creditCard := aCreditCard.!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:31:16'!
PASSED!

!classDefinition: #CreditCard category: #TusLibros stamp: 'gc 11/4/2019 19:35:37'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:35:22' prior: 50778652!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year + 1) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:35:52'!
ERROR!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:35:52'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:36:15' prior: 50778718!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:36:16'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:36:24'!
with: aSmallInteger for: aString expiresOn: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aSmallInteger for: aString expiresOn: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:37:08' prior: 50778770!
with: aNumber for: aName expiresOn: anExpirationDate 
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:37:09'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'gc 11/4/2019 19:37:30'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'gc 11/4/2019 19:37:30'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'gc 11/4/2019 19:37:30'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'gc 11/4/2019 19:37:30'!
initializeWith: aNumber for: aName expiresOn: anExpirationDate 
	self shouldBeImplemented.
	number := aNumber.
	name := aName.
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'gc 11/4/2019 19:37:35' prior: 50778812!
initializeWith: aNumber for: aName expiresOn: anExpirationDate 
	number := aNumber.
	name := aName.
	expirationDate := anExpirationDate.! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:37:39'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:37:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:39:17'!
test02cashierCantCheckOutWithExpiredCreditCard
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year previous ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 19:39:20'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'gc 11/4/2019 19:39:43'!
expiredCardErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'gc 11/4/2019 19:39:56' prior: 50778860!
expiredCardErrorMessage
	^'La tarjeta esta vencida'! !

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 19:39:57'!
FAILURE!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 19:40:10'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 19:41:07' prior: 50778671!
with: aCart on: aDate with: aCreditCard registeringOn: aSalesBook
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	^self error: self expiredCardErrorMessage .
	"^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook "! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 19:41:10'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 19:41:10'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:50:54'!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year previous ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: salesBook isEmpty .]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:51:04' prior: 50778895!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	self 
		should: [ Cashier with: cart on: date with: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: salesBook isEmpty .]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:53:30' prior: 50778919!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate cashier|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	self assert: (cashier checkout) equals: (self defaultCatalog at: self itemSoldByTheStore ).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 19:57:08' prior: 50778943!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate cashier|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	self assert: (cashier checkout) equals: (self defaultCatalog at: self itemSoldByTheStore ).
	self assert: (salesBook size) equals: 1! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:00:05' prior: 50778964!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (self defaultCatalog at: self itemSoldByTheStore ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: salesBook at: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:00:23' prior: 50778986!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (self defaultCatalog at: self itemSoldByTheStore ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:00:25'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:01:41' prior: 50778877!
with: aCart on: aDate with: aCreditCard registeringOn: aSalesBook
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook ! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:01:44'!
ERROR!
!CreditCard methodsFor: 'comparing' stamp: 'gc 11/4/2019 20:02:05'!
isExpiredAt: aFixedGregorianDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'comparing' stamp: 'gc 11/4/2019 20:03:09' prior: 50779056!
isExpiredAt: aDate 
	^expirationDate < aDate .! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:03:10'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:03:46' prior: 50778289!
checkout
	^cart total.! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:03:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:04:02'!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:04:30' prior: 50779077!
total
	^catalog at: (items at: 1)! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:04:32'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:04:49' prior: 50779081!
total
	^catalog at: (items one)! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:04:50'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:05:06' prior: 50779089!
total
	^catalog at: (items anyOne )! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:05:07'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:06:28' prior: 50779070!
checkout
	| total |
	total _ cart total .
	salesBook addLast: total .
	^ total.! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 20:06:36'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 20:06:36'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:06:36'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'gc 11/4/2019 20:11:08'!
test09CartTotalForManyItemsReturnsSum

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	! !
!CartTest methodsFor: 'tests' stamp: 'gc 11/4/2019 20:12:51' prior: 50779121!
test09CartTotalForManyItemsReturnsSum

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	
	self assert: (cart total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore)) .
	! !

!testRun: #CartTest #test09CartTotalForManyItemsReturnsSum stamp: 'gc 11/4/2019 20:12:56'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'gc 11/4/2019 20:16:42' prior: 50779097!
total
	^items inject: 0 into: [:sum :item | sum + (catalog at: item) ].! !

!testRun: #CartTest #test09CartTotalForManyItemsReturnsSum stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test09CartTotalForManyItemsReturnsSum stamp: 'gc 11/4/2019 20:16:49'!
PASSED!

!testRun: #CartTest #test09CartTotalForManyItemsReturnsSum stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 20:16:52'!
PASSED!

!testRun: #CartTest #test09CartTotalForManyItemsReturnsSum stamp: 'gc 11/4/2019 20:16:52'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:17:54'!
test03cashierCalculatesTotalPriceWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (self defaultCatalog at: self itemSoldByTheStore ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !

!methodRemoval: CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem stamp: 'gc 11/4/2019 20:17:54'!
test03cashierCalculatesTotalPriceWhenCheckingOutWithOneItem
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (self defaultCatalog at: self itemSoldByTheStore ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:18:17' prior: 50779209!
test03cashierCalculatesTotalPriceWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (self defaultCatalog at: self itemSoldByTheStore ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:18:50' prior: 50779258!
test03cashierCalculatesTotalPriceWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/4/2019 20:18:51'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 20:18:51'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 20:18:51'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/4/2019 20:18:51'!
PASSED!

----SNAPSHOT----(4 November 2019 20:19:53) CuisUniversity-3938.image priorSource: 14286174!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'gc 11/4/2019 20:20:40'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'gc 11/4/2019 20:21:28'!
test01CantCreateCardWithShortNumber
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:22:33' prior: 50779333!
test01CantCreateCardWithShortNumber
	self 
		should: [ | expireDate | CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:22:59' prior: 50779338!
test01CantCreateCardWithShortNumber
	| expireDate |
	self 
		should: [ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:23:11' prior: 50779351!
test01CantCreateCardWithShortNumber
	| expireDate |
	expireDate _
	self 
		should: [ CreditCard with: 123456789123467 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:24:01' prior: 50779364!
test01CantCreateCardWithShortNumber
	| expireDate |
	expireDate _ GregorianMonthOfYear year: 1995 month: September .
	self 
		should: [ CreditCard with: 123456789123467 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:24:19'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:24:19'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:26:25' prior: 50778781!
with: aNumber for: aName expiresOn: anExpirationDate 
	(aNumber size < 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:26:26'!
ERROR!
!CreditCard class methodsFor: 'error message' stamp: 'gc 11/4/2019 20:26:53'!
invalidNumberErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error message' stamp: 'gc 11/4/2019 20:27:05' prior: 50779411!
invalidNumberErrorMessage
	^'Numero invalido'! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:27:07'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:27:34'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:34:41'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:35:06'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:35:52'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:36:01'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:36:01'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:36:10'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:36:36'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:37:07'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:38:01' prior: 50779398!
with: aNumber for: aName expiresOn: anExpirationDate 
	(aNumber digitLength < 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:38:02'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:38:06'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:38:29'!
test01CantCreateCardWithLongNumber
	| expireDate |
	expireDate _ GregorianMonthOfYear year: 1995 month: September .
	self 
		should: [ CreditCard with: 12345678912345678 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !

!testRun: #CreditCardTest #test01CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:38:30'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:38:30'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:38:30'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:39:04'!
test02CantCreateCardWithLongNumber
	| expireDate |
	expireDate _ GregorianMonthOfYear year: 1995 month: September .
	self 
		should: [ CreditCard with: 12345678912345678 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !

!methodRemoval: CreditCardTest #test01CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:39:04'!
test01CantCreateCardWithLongNumber
	| expireDate |
	expireDate _ GregorianMonthOfYear year: 1995 month: September .
	self 
		should: [ CreditCard with: 12345678912345678 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:39:07'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:39:31' prior: 50779454!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber digitLength) < 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:39:32'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:39:35'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:39:35'!
PASSED!

214134 digitLength !

214134 digitLength !
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:42:37' prior: 50779526!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber log) < 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:42:38'!
FAILURE!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:42:45'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:42:48'!
FAILURE!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:42:48'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:43:11' prior: 50779547!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber log) ~= 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:43:13'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:43:13'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:46:03'!
test03CantCreateCardWithLongName
	| expireDate |
	expireDate _ GregorianMonthOfYear year: 1995 month: September .
	self 
		should: [ CreditCard with: 1234567891234567 for: 'Alan Kay, Alan Turing, Dan Ingalls and Adele Goldberg' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:46:12' prior: 50779586!
test03CantCreateCardWithLongName
	| expireDate |
	expireDate _ GregorianMonthOfYear year: 1995 month: September .
	self 
		should: [ CreditCard with: 1234567891234567 for: 'Alan Kay, Alan Turing, Dan Ingalls and Adele Goldberg' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNameErrorMessage.]	! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:46:35'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:46:35'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:46:35'!
ERROR!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:46:35'!
ERROR!
!CreditCard class methodsFor: 'error message' stamp: 'gc 11/4/2019 20:46:44'!
invalidNameErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error message' stamp: 'gc 11/4/2019 20:46:56' prior: 50779630!
invalidNameErrorMessage
	^'El nombre es muy largo'! !

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:46:57'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:49:52' prior: 50779570!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber log) ~= 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	(aName size > 30) ifTrue: [^self error: self invalidNameErrorMessage ].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:49:56'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:49:56'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:49:56'!
FAILURE!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:49:56'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:50:17' prior: 50779643!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber log) ~= 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	((aName size) > 30) ifTrue: [^self error: self invalidNameErrorMessage ].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:50:19'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:50:19'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:50:19'!
FAILURE!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:50:19'!
FAILURE!

'hola' size!

'holaa' size!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:51:02'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:51:36' prior: 50779668!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber log) ~= 16) ifTrue: [^self error: self invalidNumberErrorMessage].
	((aName size) > 30) ifTrue: [^self error: self invalidNameErrorMessage ].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !
!CreditCard class methodsFor: 'error message' stamp: 'gc 11/4/2019 20:51:45' prior: 50779635!
invalidNameErrorMessage
	^'El nombre es muy largo'! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:51:47'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:51:47'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:51:47'!
FAILURE!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:51:47'!
FAILURE!

'Alan Kay, Alan Turing, Dan Ingalls and Adele Goldberg' size!

self log!

self log: 10!

self log: 10!

self log ceiling !

1234567891234567!

1000000000000000 log!

9999999999999999 log!

9999999999999999 log floor !

9999999999999999 floorLog: 10!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:56:30' prior: 50779697!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber floatLog) ~= 15) ifTrue: [^self error: self invalidNumberErrorMessage].
	((aName size) > 30) ifTrue: [^self error: self invalidNameErrorMessage ].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:56:31'!
FAILURE!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:56:35'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'gc 11/4/2019 20:56:56' prior: 50779735!
with: aNumber for: aName expiresOn: anExpirationDate 
	((aNumber floorLog: 10) ~= 15) ifTrue: [^self error: self invalidNumberErrorMessage].
	((aName size) > 30) ifTrue: [^self error: self invalidNameErrorMessage ].
	^self new initializeWith: aNumber for: aName expiresOn: anExpirationDate. ! !

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:56:58'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:56:58'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:56:58'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:57:55' prior: 50779377!
test01CantCreateCardWithShortNumber
	| expireDate |
	year _ GregorianYear number: 1995.
	expireDate _ GregorianMonthOfYear year: year month: September .
	self 
		should: [ CreditCard with: 123456789123467 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:58:00' prior: 50779776!
test01CantCreateCardWithShortNumber
	| expireDate year|
	year _ GregorianYear number: 1995.
	expireDate _ GregorianMonthOfYear year: year month: September .
	self 
		should: [ CreditCard with: 123456789123467 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:58:02' prior: 50779792!
test01CantCreateCardWithShortNumber
	| expireDate year |
	year _ GregorianYear number: 1995.
	expireDate _ GregorianMonthOfYear year: year month: September .
	self 
		should: [ CreditCard with: 123456789123467 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:58:15' prior: 50779494!
test02CantCreateCardWithLongNumber
	| expireDate year |
	year _ GregorianYear number: 1995.
	expireDate _ GregorianMonthOfYear year: year month: September .
	self 
		should: [ CreditCard with: 12345678912345678 for: 'Alan Kay' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage.]	! !

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:58:17'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:58:17'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:58:17'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:58:17'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'gc 11/4/2019 20:58:25' prior: 50779602!
test03CantCreateCardWithLongName
	| expireDate year |
	year _ GregorianYear number: 1995.
	expireDate _ GregorianMonthOfYear year: year month: September .
	self 
		should: [ CreditCard with: 1234567891234567 for: 'Alan Kay, Alan Turing, Dan Ingalls and Adele Goldberg' expiresOn: expireDate.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNameErrorMessage.]	! !

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:58:25'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:58:25'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:58:25'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:58:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CartTest #test09CartTotalForManyItemsReturnsSum stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CreditCardTest #test01CantCreateCardWithShortNumber stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CreditCardTest #test02CantCreateCardWithLongNumber stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

!testRun: #CreditCardTest #test03CantCreateCardWithLongName stamp: 'gc 11/4/2019 20:58:51'!
PASSED!

----SNAPSHOT----(4 November 2019 21:06:02) CuisUniversity-3938.image priorSource: 14325405!

----QUIT----(4 November 2019 21:27:54) CuisUniversity-3938.image priorSource: 14344955!

----STARTUP---- (6 November 2019 19:51:32) as /home/chiara/Documents/UBA/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 19:55:41'!
test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !

!methodRemoval: CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/6/2019 19:55:41'!
test03cashierCalculatesTotalPriceWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier with: cart on: date with: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/6/2019 20:02:27'!
forCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:02:27' prior: 50778834!
test02cashierCantCheckOutWithExpiredCreditCard
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year previous ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	self 
		should: [ Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: salesBook isEmpty .]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:02:27' prior: 50779940!
test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:02:27' prior: 50778746!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.

	self 
		should: [ Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !

!methodRemoval: Cashier class #with:on:with:registeringOn: stamp: 'gc 11/6/2019 20:02:27'!
with: aCart on: aDate with: aCreditCard registeringOn: aSalesBook
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/6/2019 20:03:37' prior: 50779989!
forCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook 
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:11:26' prior: 50780053!
test01cashierCantCheckOutEmptyCart
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.

	self 
		should: [ Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook processingOn: self .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:11:31'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/6/2019 20:11:39'!
forCheckingOut: aCart on: aFixedGregorianDate chargingFrom: aCreditCard registeringOn: anOrderedCollection processingOn: aCashierTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForCheckingOut: aCart on: aFixedGregorianDate chargingFrom: aCreditCard registeringOn: anOrderedCollection processingOn: aCashierTest ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/6/2019 20:11:45' prior: 50780128!
forCheckingOut: aCart on: aFixedGregorianDate chargingFrom: aCreditCard registeringOn: anOrderedCollection processingOn: aCashierTest 

	^self new initializeForCheckingOut: aCart on: aFixedGregorianDate chargingFrom: aCreditCard registeringOn: anOrderedCollection processingOn: aCashierTest ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/6/2019 20:13:49' prior: 50780144!
forCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook processingOn: aMerchantProcessor
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeforCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook processingOn: aMerchantProcessor! !

Object subclass: #Cashier
	instanceVariableNames: 'cart date creditCard salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'gc 11/6/2019 20:14:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart date creditCard salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:14:18'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:14:18'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/6/2019 20:14:18'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale stamp: 'gc 11/6/2019 20:14:18'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/6/2019 20:14:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:14:41' prior: 50780003!
test02cashierCantCheckOutWithExpiredCreditCard
	| creditCard date salesBook expireDate|
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year previous ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: self itemSoldByTheStore .

	self 
		should: [ Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: salesBook isEmpty .]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:14:47' prior: 50780027!
test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale stamp: 'gc 11/6/2019 20:14:49'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/6/2019 20:15:04' prior: 50780157!
forCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook processingOn: aMerchantProcessor
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeForCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook processingOn: aMerchantProcessor! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale stamp: 'gc 11/6/2019 20:15:07'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'gc 11/6/2019 20:15:16'!
initializeForCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook processingOn: aMerchantProcessor 
	self shouldBeImplemented.
	cart := aCart.
	date := aDate.
	creditCard := aCreditCard.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'gc 11/6/2019 20:15:25' prior: 50780279!
initializeForCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook processingOn: aMerchantProcessor 
	cart := aCart.
	date := aDate.
	creditCard := aCreditCard.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale stamp: 'gc 11/6/2019 20:15:26'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:15:26'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/6/2019 20:15:26'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale stamp: 'gc 11/6/2019 20:15:26'!
PASSED!

!methodRemoval: Cashier class #forCheckingOut:on:chargingFrom:registeringOn: stamp: 'gc 11/6/2019 20:15:44'!
forCheckingOut: aCart on: aDate chargingFrom: aCreditCard registeringOn: aSalesBook 
	aCart isEmpty ifTrue: [
		^self error: self emptyCartErrorMessage 
	].
	(aCreditCard isExpiredAt: aDate) ifTrue: [
		^self error: self expiredCardErrorMessage
	].
	
	^self new initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook !

!methodRemoval: Cashier #initializeWith:on:with:registeringOn: stamp: 'gc 11/6/2019 20:15:54'!
initializeWith: aCart on: aDate with: aCreditCard registeringOn: aSalesBook
	cart := aCart.
	date := aDate.
	creditCard := aCreditCard.
	salesBook := aSalesBook.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:17:16'!
test03cashierCalculatesTotalPriceWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !

!methodRemoval: CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale stamp: 'gc 11/6/2019 20:17:16'!
test03cashierCalculatesTotalPriceWhenCheckingOutAndRegistersSale
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:17:49'!
test04cashierRegistersSaleWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	total _ cashier checkout.
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:17:59' prior: 50780339!
test03cashierCalculatesTotalPriceWhenCheckingOut
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	total _ cashier checkout.
	self assert: (total) equals: (2 * (self defaultCatalog at: self itemSoldByTheStore) ).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:18:57'!
test05cashierUsesMerchantProcessor
	| creditCard date salesBook expireDate cashier total |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	
	total _ cashier checkout.
	self assert: (salesBook size) equals: 1.
	self assert: total equals: (salesBook at: 1).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:20:32' prior: 50779105!
checkout
	| total |
	total _ cart total .
	
	salesBook addLast: total .	
	^ total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:21:56' prior: 50780460!
checkout
	| total |
	total _ cart total .
	merchantProcessor debit: total from: creditCard .
	salesBook addLast: total .	
	^ total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:22:28' prior: 50780466!
checkout
	| total |
	total _ cart total .

	salesBook addLast: total .	
	^ total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:27:25' prior: 50780437!
test05cashierUsesMerchantProcessor
	| creditCard date salesBook expireDate cashier total debitedAmount cardDebitedFrom debitInformation |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		debitedAmount _ aDebitedAmount .
		cardDebitedFrom _ aCardDebitedFrom .
		].
	total _ cashier checkout.
	self assert: creditCard equals: cardDebitedFrom.
	self assert: total equals: debitedAmount .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:27:55' prior: 50780480!
test05cashierUsesMerchantProcessor
	| creditCard date salesBook expireDate cashier total debitedAmount cardDebitedFrom debitInformation |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		debitedAmount _ aDebitedAmount .
		cardDebitedFrom _ aCardDebitedFrom .
		].
	total _ cashier checkout.
	self assert: creditCard equals: cardDebitedFrom.
	self assert: total equals: debitedAmount .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:28:29' prior: 50780509!
test05cashierUsesMerchantProcessor
	| creditCard date salesBook expireDate cashier total debitedAmount cardDebitedFrom |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	date _ [:aDebitedAmount :aCardDebitedFrom |
		debitedAmount _ aDebitedAmount .
		cardDebitedFrom _ aCardDebitedFrom .
		].
	total _ cashier checkout.
	self assert: creditCard equals: cardDebitedFrom.
	self assert: total equals: debitedAmount .! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'cart debitInformation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'gc 11/6/2019 20:28:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cart debitInformation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:28:57' prior: 50780538!
test05cashierUsesMerchantProcessor
	| creditCard date salesBook expireDate cashier total debitedAmount cardDebitedFrom |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		debitedAmount _ aDebitedAmount .
		cardDebitedFrom _ aCardDebitedFrom .
		].
	total _ cashier checkout.
	self assert: creditCard equals: cardDebitedFrom.
	self assert: total equals: debitedAmount .! !

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:29:00'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:29:58' prior: 50780474!
checkout
	| total |
	total _ cart total .
	merchantProcessor debit: total from: creditCard .
	salesBook addLast: total .	
	^ total.! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:30:03'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/6/2019 20:30:03'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/6/2019 20:30:03'!
ERROR!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/6/2019 20:30:03'!
ERROR!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:30:03'!
ERROR!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:30:08'!
ERROR!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:30:08'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:30:18'!
debit: aSimpleMeasure from: aCreditCard 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:31:25' prior: 50780639!
debit: anAmount from: aCreditCard 
	^debitInformation value: anAmount value: aCreditCard ! !

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:31:27'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:31:33'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/6/2019 20:31:33'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/6/2019 20:31:33'!
ERROR!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/6/2019 20:31:33'!
ERROR!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:31:33'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/6/2019 20:31:36'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/6/2019 20:32:11' prior: 50778139!
setUp
	cart _ Cart acceptingItemsOf: self defaultCatalog .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		].! !

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/6/2019 20:32:15'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/6/2019 20:32:15'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/6/2019 20:32:15'!
PASSED!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/6/2019 20:32:15'!
PASSED!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/6/2019 20:32:15'!
PASSED!

----SNAPSHOT----(6 November 2019 20:32:47) CuisUniversity-3938.image priorSource: 14345048!

----SNAPSHOT----(6 November 2019 22:06:26) CuisUniversity-3938.image priorSource: 14369613!

----QUIT----(6 November 2019 22:06:30) CuisUniversity-3938.image priorSource: 14369706!

----STARTUP---- (7 November 2019 16:00:59) as /home/chiara/Documents/UBA/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!

!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:03:30'!
test06cashierDoesntRegisterSaleIfLimitIsReachedInCard
	| creditCard date salesBook expireDate cashier total   |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [^self error: 'CreditCard limit reached'.].
	total _ cashier checkout.
	! !
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:05:01' prior: 50780713!
test06cashierDoesntRegisterSaleIfLimitIsReachedInCard
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [^self error: 'CreditCard limit reached'.].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardLimitReachedErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:05:04'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'gc 11/7/2019 16:05:15'!
creditCardLimitReachedErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'gc 11/7/2019 16:06:19' prior: 50780767!
creditCardLimitReachedErrorMessage
	^'La venta no se proceso porque se la tarjeta ya supero el limite.'! !

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:06:21'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:08:16' prior: 50780735!
test06cashierDoesntRegisterSaleIfLimitIsReachedInCard
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [^self error:'La venta no se proceso porque se la tarjeta ya supero el limite.'].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardLimitReachedErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:08:17'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:09:12' prior: 50780782!
test06cashierDoesntRegisterSaleIfLimitIsReachedInCard
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [
		^self error:'La venta no se proceso porque se la tarjeta ya supero el limite.'].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardLimitReachedErrorMessage.
			self assert: salesBook isEmpty .]! !
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:09:31' prior: 50780815!
test06cashierDoesntRegisterSaleIfLimitIsReachedInCard
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		^self error:'La venta no se proceso porque se la tarjeta ya supero el limite.'].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardLimitReachedErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:09:32'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/7/2019 16:09:32'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/7/2019 16:09:32'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/7/2019 16:09:32'!
PASSED!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/7/2019 16:09:32'!
PASSED!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/7/2019 16:09:32'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:09:32'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:10:27'!
test07cashierDoesntRegisterSaleIfCardIsNotRegistered
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		^self error:'La venta no se proceso porque la tarjeta ya supero el limite.'].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardLimitReachedErrorMessage.
			self assert: salesBook isEmpty .]! !
!Cashier class methodsFor: 'error message' stamp: 'gc 11/7/2019 16:10:38' prior: 50780772!
creditCardLimitReachedErrorMessage
	^'La venta no se proceso porque la tarjeta ya supero el limite.'! !
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:11:11' prior: 50780898!
test07cashierDoesntRegisterSaleIfCardIsNotRegistered
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		^self error:'La venta no se proceso porque la tarjeta no esta registrada.'].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardNotRegisteredErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:11:15'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'gc 11/7/2019 16:11:28'!
creditCardNotRegisteredErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'gc 11/7/2019 16:11:47' prior: 50780969!
creditCardNotRegisteredErrorMessage
	^'La venta no se proceso porque la tarjeta no esta registrada.'! !

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:11:48'!
FAILURE!

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:11:48'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:11:48'!
FAILURE!

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:12:44'!
FAILURE!

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:12:44'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:12:44'!
FAILURE!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/7/2019 16:13:01'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/7/2019 16:13:01'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/7/2019 16:13:01'!
PASSED!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/7/2019 16:13:01'!
PASSED!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/7/2019 16:13:01'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:13:01'!
FAILURE!

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:13:01'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:13:01'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'gc 11/7/2019 16:13:43' prior: 50780844!
test06cashierDoesntRegisterSaleIfLimitIsReachedInCard
	| creditCard date salesBook expireDate cashier |
	salesBook _ OrderedCollection new.
	date _ FixedGregorianDate today.
	expireDate _ GregorianMonthOfYear year: (date year next ) month: (date month ).
	creditCard _ CreditCard with: 1234567891234567 for: 'Alan Kay' expiresOn: expireDate.
	cart add: 2 of: self itemSoldByTheStore .

	cashier _  Cashier forCheckingOut: cart on: date chargingFrom: creditCard registeringOn: salesBook  processingOn: self .
	debitInformation _ [:aDebitedAmount :aCardDebitedFrom |
		^self error: 'La venta no se proceso porque la tarjeta ya supero el limite.'].

	self 
		should: [cashier checkout.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardLimitReachedErrorMessage.
			self assert: salesBook isEmpty .]! !

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test01cashierCantCheckOutEmptyCart stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test02cashierCantCheckOutWithExpiredCreditCard stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test03cashierCalculatesTotalPriceWhenCheckingOut stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test04cashierRegistersSaleWhenCheckingOut stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test05cashierUsesMerchantProcessor stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test06cashierDoesntRegisterSaleIfLimitIsReachedInCard stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

!testRun: #CashierTest #test07cashierDoesntRegisterSaleIfCardIsNotRegistered stamp: 'gc 11/7/2019 16:13:45'!
PASSED!

----SNAPSHOT----(7 November 2019 16:13:53) CuisUniversity-3938.image priorSource: 14369799!

----QUIT----(7 November 2019 16:15:14) CuisUniversity-3938.image priorSource: 14383300!

----STARTUP---- (7 November 2019 18:39:02) as /home/chiara/Documents/UBA/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!


!classRemoval: #CreditCard stamp: 'gc 11/7/2019 18:48:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'gc 11/7/2019 18:48:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart date creditCard salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'gc 11/7/2019 18:48:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'gc 11/7/2019 18:48:54'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'gc 11/7/2019 18:48:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cart debitInformation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'gc 11/7/2019 18:48:55'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/chiara/Documents/UBA/ing-soft-1/2019-2c/25-TusLibros/Iteracion2/TusLibros-33.st----!

Object subclass: #InternalRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: #TusLibros stamp: 'gc 11/7/2019 19:11:40'!
Object subclass: #InternalRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/7/2019 19:14:17'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'no messages' stamp: 'gc 11/7/2019 19:24:26'!
test01CreateCartForUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword |
	
	internalInterface _ InternalInterface new.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !

!testRun: #InternalInterfaceTest #test01CreateCartForUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:27:00'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:27:52'!
createCartFor: aString with: aString2 
	self shouldBeImplemented.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:28:17'!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword |
	
	internalInterface _ InternalInterface new.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !

!methodRemoval: InternalInterfaceTest #test01CreateCartForUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:28:17'!
test01CreateCartForUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword |
	
	internalInterface _ InternalInterface new.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:28:27'!
ERROR!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 19:31:02'!
Object subclass: #InternalInterface
	instanceVariableNames: 'username'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 19:31:03'!
Object subclass: #InternalInterface
	instanceVariableNames: 'username password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:30:49' prior: 50781773!
createCartFor: aUserName with: aPassword 
	username _ aUserName.
	password _ aPassword .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:31:11'!
ERROR!
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/7/2019 19:31:27'!
hasACart
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/7/2019 19:32:02' prior: 50781839!
hasACart
	^true! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:32:05'!
ERROR!
!InternalInterface methodsFor: 'observer' stamp: 'gc 11/7/2019 19:32:20'!
user
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'observer' stamp: 'gc 11/7/2019 19:32:27' prior: 50781850!
user
	^username ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:32:30'!
ERROR!
!InternalInterface methodsFor: 'observer' stamp: 'gc 11/7/2019 19:32:38'!
password
	self shouldBeImplemented.
	^password! !
!InternalInterface methodsFor: 'observer' stamp: 'gc 11/7/2019 19:32:43' prior: 50781861!
password
	^password! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:32:46'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:32:46'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:33:11' prior: 50781778!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword |
	internalInterface _ InternalInterface new.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:34:48' prior: 50781878!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword |
	
	internalInterface _ InternalInterface new.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:45:00' prior: 50781894!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList |
	
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !

TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/7/2019 19:45:25'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:45:53'!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'gc 11/7/2019 19:47:00'!
defaultUserList
	
	^ Dictionary new
		at: self userOfTheStore put: self passwordOfUserOfTheStore;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:47:17'!
userOfTheStore
	^'a valid user'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:47:37'!
passwordOfUserOfTheStore
	^'a valid password'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:47:57'!
invalidUserOfTheStore
	^'an invalid user'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:48:10'!
invalidPasswordOfUserOfTheStore
	^'an invalid password'! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:49:26' prior: 50781910!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:49:43' prior: 50781972!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ 'user'.
	aPassword _ 'pass'.
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:50:16' prior: 50781990!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	internalInterface createCartFor: aUserName with: aPassword .
	self assert: internalInterface hasACart.
	self assert: aUserName equals: internalInterface user.
	self assert: aPassword equals: internalInterface password.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:52:42' prior: 50782009!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !

!methodRemoval: InternalInterface #createCartFor:with: stamp: 'gc 11/7/2019 19:53:07'!
createCartFor: aUserName with: aPassword 
	username _ aUserName.
	password _ aPassword .!

!methodRemoval: InternalInterface #hasACart stamp: 'gc 11/7/2019 19:53:26'!
hasACart
	^true!

!methodRemoval: InternalInterface #password stamp: 'gc 11/7/2019 19:53:32'!
password
	^password!

!methodRemoval: InternalInterface #user stamp: 'gc 11/7/2019 19:53:33'!
user
	^username !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:53:37'!
ERROR!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:53:37'!
ERROR!
!InternalInterface class methodsFor: 'instance creation' stamp: 'gc 11/7/2019 19:53:45'!
withUserList: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUserList: aDictionary ! !
!InternalInterface class methodsFor: 'instance creation' stamp: 'gc 11/7/2019 19:54:05' prior: 50782072!
withUserList: aUserList 
	^self new initializeWithUserList: aUserList ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:54:08'!
ERROR!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 19:54:22'!
Object subclass: #InternalInterface
	instanceVariableNames: 'username password userList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 19:54:22'!
initializeWithUserList: aUserList 
	self shouldBeImplemented.
	userList := aUserList.! !
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 19:54:27' prior: 50782098!
initializeWithUserList: aUserList 
	userList := aUserList.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:54:31'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:54:41'!
createCartFor: aString with: aString2 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:55:04' prior: 50782113!
createCartFor: aUser with: aPassword 
	^1! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:55:06'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:55:15'!
hasACartWith: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:55:20' prior: 50782128!
hasACartWith: aSmallInteger 
	^true
! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:55:23'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:55:42'!
ownerOf: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:55:58' prior: 50782141!
ownerOf: aCartID 
	self shouldBeImplemented.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:56:01'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:56:24' prior: 50782133!
hasACartWith: aCartID 
	^true
! !

Object subclass: #InternalInterface
	instanceVariableNames: 'userList carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 19:56:43'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 19:57:04' prior: 50782104!
initializeWithUserList: aUserList 
	userList _ aUserList.
	carts _ Dictionary new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:57:50' prior: 50782119!
createCartFor: aUser with: aPassword 
	carts at: 1 put: aUser .
	^1! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:58:13' prior: 50782146!
ownerOf: aCartID 
	carts at: aCartID ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 19:58:18' prior: 50782184!
ownerOf: aCartID 
	^carts at: aCartID ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 19:58:21'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:00:00'!
test02CreateCartForAnInvalidUserDoesntCreateACart
	| internalInterface aUserName aPassword userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:02:15' prior: 50782198!
test02CreateCartForAnInvalidUserDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidUserErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:02:28' prior: 50782218!
test02CreateCartForAnInvalidUserDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory invalidUserOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidUserErrorMessage.
			self assert: internalInterface hasNoCarts ]! !

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:02:34'!
FAILURE!

aa _ Dictionary new.
aa at: 'hola'.!

aa _ Dictionary new.
aa at: 123 ifAbsent: [^1]!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:06:03' prior: 50782178!
createCartFor: aUser with: aPassword 
	userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	carts at: 1 put: aUser .
	^1! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:06:08'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:06:08'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:06:08'!
ERROR!
!InternalInterface class methodsFor: 'error message' stamp: 'gc 11/7/2019 20:06:25'!
invalidUserErrorMessage
	self shouldBeImplemented.! !
!InternalInterface class methodsFor: 'error message' stamp: 'gc 11/7/2019 20:06:36' prior: 50782290!
invalidUserErrorMessage
	^'Usuario invalido'! !

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:06:38'!
ERROR!
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/7/2019 20:06:52'!
hasNoCarts
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/7/2019 20:07:04' prior: 50782303!
hasNoCarts
	^carts size = 0! !
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/7/2019 20:07:12' prior: 50782308!
hasNoCarts
	^carts isEmpty ! !

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:07:18'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:07:18'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:08:11'!
test02CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:08:29'!
test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !

!methodRemoval: InternalInterfaceTest #test02CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:08:29'!
test02CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:08:35'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:08:35'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:08:35'!
FAILURE!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:08:35'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:11:15' prior: 50782270!
createCartFor: aUser with: aPassword 
	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	carts at: 1 put: aUser .
	^1! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:11:16'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:11:16'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:11:16'!
ERROR!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:11:16'!
ERROR!
!InternalInterface class methodsFor: 'error message' stamp: 'gc 11/7/2019 20:11:26'!
invalidPasswordErrorMessage
	self shouldBeImplemented.! !
!InternalInterface class methodsFor: 'error message' stamp: 'gc 11/7/2019 20:11:37' prior: 50782444!
invalidPasswordErrorMessage
	^'Contrasenia invalida'! !

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:11:41'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:11:49'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:11:49'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:11:49'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:13:14'!
test04DifferentCartsHaveDifferentIDs
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:15:47' prior: 50782471!
test04DifferentCartsHaveDifferentIDs
	| internalInterface aUserName aPassword userList cartID1 cartID2 |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID1 _ internalInterface createCartFor: aUserName with: aPassword .
	cartID2 _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID1 ).
	self assert: (internalInterface hasACartWith: cartID2 ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID1).
	self assert: aUserName equals: (internalInterface ownerOf: cartID2).
	self deny: cartID1 = cartID2.! !

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:15:52'!
FAILURE!

Object subclass: #InternalInterface
	instanceVariableNames: 'userList carts nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 20:16:18'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList carts nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 20:16:29' prior: 50782172!
initializeWithUserList: aUserList 
	userList _ aUserList.
	carts _ Dictionary new.
	nextCartID _ 1.! !
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/7/2019 20:18:05' prior: 50782415!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID|
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	carts at: cartID put: aUser .
	^cartID ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:18:10'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:18:10'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:18:10'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:18:10'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:28:03'!
test05CantAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validBookISBN.
	internalInterface _ InternalInterface withUserList: userList.
	
	 internalInterface addToCart: cartID book: bookISBN quantity: 1.! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:28:09'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:28:17'!
invalidCartID
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:28:32' prior: 50782593!
invalidCartID
	^'-10'! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:28:34'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:28:40'!
validBookISBN
	self shouldBeImplemented.! !

!methodRemoval: StoreTestObjectsFactory #validBookISBN stamp: 'gc 11/7/2019 20:31:41'!
validBookISBN
	self shouldBeImplemented.!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'gc 11/7/2019 20:33:50'!
defaultBookCatalog
	
	^ Dictionary new
		at: self validEditorialISBN put: self itemSellByTheStorePrice;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:34:45'!
validEditorialISBN
	^ '978-3-16-148410-0'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:35:09'!
invalidEditorialISBN
	^ '000-3-16-148410-0'! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:35:21'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:35:40' prior: 50782575!
test05CantAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList.
	
	 internalInterface addToCart: cartID book: bookISBN quantity: 1.! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:35:41'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:35:48'!
addToCart: aString book: aString2 quantity: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:36:16' prior: 50782652!
addToCart: aCartID book: aBookISBN quantity: anAmount
	 
	! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:36:38' prior: 50782658!
addToCart: aCartID book: aBookISBN quantity: anAmount
	^self error:  'efas'
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:37:25' prior: 50782634!
test05CantAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList.
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:38:23' prior: 50782670!
test05CantAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList.
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
			self assert: internalInterface hasNoCarts ]! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:38:25'!
ERROR!
!InternalInterface class methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:38:33'!
invalidCartIDErrorMessage
	self shouldBeImplemented.! !
!InternalInterface class methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:39:08' prior: 50782717!
invalidCartIDErrorMessage
	^'No hay un cart con ese ID'! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:39:10'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:39:36' prior: 50782664!
addToCart: aCartID book: aBookISBN quantity: anAmount
	^self error: self class invalidCartIDErrorMessage .	! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:39:38'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:39:38'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:39:38'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:39:38'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:39:38'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:40:29'!
test06CanAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList.
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:41:06' prior: 50782758!
test06CanAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:43:20' prior: 50782773!
test06CanAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !

!testRun: #InternalInterfaceTest #test06CanAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:43:25'!
ERROR!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 20:45:59'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:45:59' prior: 50782312!
hasNoCarts
	^cartOwners isEmpty ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:45:59' prior: 50782189!
ownerOf: aCartID 
	^cartOwners at: aCartID ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:45:59' prior: 50782538!
initializeWithUserList: aUserList 
	userList _ aUserList.
	cartOwners _ Dictionary new.
	nextCartID _ 1.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:45:59' prior: 50782545!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID|
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	cartOwners at: cartID put: aUser .
	^cartID ! !

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 20:46:30'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 20:46:29' prior: 50782840!
initializeWithUserList: aUserList 
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.! !
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/7/2019 20:47:24' prior: 50782847!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID|
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	cartOwners at: cartID put: aUser .
	carts at: cartID put: aUser .
	^cartID ! !
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/7/2019 20:49:38' prior: 50782878!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart|
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	cartOwners at: cartID put: aUser .
	cart _ Cart .
	carts at: cartID put: cart .
	^cartID ! !

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/7/2019 20:50:58'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/7/2019 20:50:54' prior: 50782894!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart|
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	cartOwners at: cartID put: aUser .
	cart _ Cart acceptingItemsOf: catalog.
	carts at: cartID put: cart .
	^cartID ! !
!InternalInterface class methodsFor: 'instance creation' stamp: 'gc 11/7/2019 20:53:27'!
withUserList: aUserList andCatalog: aCatalog  
	^self new initializeWithUserList: aUserList ! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:53:27' prior: 50782351!
test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:53:27' prior: 50782692!
test05CantAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:53:27' prior: 50782494!
test04DifferentCartsHaveDifferentIDs
	| internalInterface aUserName aPassword userList cartID1 cartID2 |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID1 _ internalInterface createCartFor: aUserName with: aPassword .
	cartID2 _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID1 ).
	self assert: (internalInterface hasACartWith: cartID2 ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID1).
	self assert: aUserName equals: (internalInterface ownerOf: cartID2).
	self deny: cartID1 = cartID2.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:53:27' prior: 50782241!
test02CreateCartForAnInvalidUserDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	aUserName _ testObjectsFactory invalidUserOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidUserErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:53:27' prior: 50782797!
test06CanAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:53:27' prior: 50782030!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !

!methodRemoval: InternalInterface class #withUserList: stamp: 'gc 11/7/2019 20:53:27'!
withUserList: aUserList 
	^self new initializeWithUserList: aUserList !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:53:37'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:53:37'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:53:37'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:53:37'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:53:37'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:53:37'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:53:37'!
ERROR!

----SNAPSHOT----(7 November 2019 20:54:10) CuisUniversity-3938.image priorSource: 14383393!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:54:31'!
test06CanAddToCartWithValidID
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !

!methodRemoval: InternalInterfaceTest #test06CanAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:54:31'!
test06CanAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:54:36'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:54:36'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:54:36'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:54:36'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:54:36'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:54:36'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:54:36'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:56:08' prior: 50782732!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	cart add: anAmount of: aBookISBN .	! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:56:08'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:56:08'!
ERROR!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 20:57:29'!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.! !
!InternalInterface class methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:57:29' prior: 50782936!
withUserList: aUserList andCatalog: aCatalog  
	^self new initializeWithUserList: aUserList andCatalog: aCatalog ! !

!methodRemoval: InternalInterface #initializeWithUserList: stamp: 'gc 11/7/2019 20:57:29'!
initializeWithUserList: aUserList 
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:57:42'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:57:42'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:57:42'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:57:42'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:57:42'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:57:42'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:57:42'!
ERROR!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/7/2019 20:57:58' prior: 50783232!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 20:58:00'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 20:58:00'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 20:58:00'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 20:58:00'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 20:58:00'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:58:00'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 20:58:00'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 20:58:13'!
cart: aSmallInteger has: aString 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:00:45' prior: 50783315!
cart: aCartID has: aBookISBN
	carts at: aCartID.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:01:04'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:01:04'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:01:04'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:01:04'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 21:01:04'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 21:01:04'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 21:01:04'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:01:43' prior: 50783321!
cart: aCartID has: aBookISBN
	^(carts at: aCartID ) includes: aBookISBN .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:01:46'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:01:46'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:01:46'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:01:46'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 21:01:46'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 21:01:46'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:05:38'!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:05:47'!
test05CantAddToCartWithInvalidCartID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
			self assert: internalInterface hasNoCarts ]! !

!methodRemoval: InternalInterfaceTest #test05CantAddToCartWithInvalidID stamp: 'gc 11/7/2019 21:05:47'!
test05CantAddToCartWithInvalidID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
			self assert: internalInterface hasNoCarts ]!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:06:04'!
test06CanAddToCartWithValidCartIDAndISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !

!methodRemoval: InternalInterfaceTest #test06CanAddToCartWithValidID stamp: 'gc 11/7/2019 21:06:04'!
test06CanAddToCartWithValidID
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:07:05' prior: 50783380!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:08:12' prior: 50783496!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidISBNErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:08:23' prior: 50783520!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidISBNErrorMessage.
			]! !

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:08:26'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:08:54' prior: 50783549!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cart .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:11:22' prior: 50783580!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName cart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface initWith: cartID) .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:11:40' prior: 50783606!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface getCartWith: cartID) .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:12:09' prior: 50783633!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface getCartWith: cartID) invalidItemErrorMessage .
			]! !

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:12:10'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:12:16'!
getCartWith: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:12:50' prior: 50783691!
getCartWith: aCartID 
	^carts at: aCartID .! !

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/7/2019 21:12:52'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:12:52'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:15:13'!
test08CantListCartWithInvalidCartID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:15:27' prior: 50783730!
test08CantListCartWithInvalidCartID
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:15:37' prior: 50783403!
test05CantAddToCartWithInvalidCartID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
		]! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:15:38'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/7/2019 21:15:38'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/7/2019 21:15:38'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:15:50'!
listCart: aString 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:17:07' prior: 50783828!
listCart: aCartID 
	self error: self class invalidCartIDErrorMessage .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:17:12' prior: 50783833!
listCart: aCartID 
	^self error: self class invalidCartIDErrorMessage .! !

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/7/2019 21:17:13'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:17:14'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/7/2019 21:17:14'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:17:54'!
test09ListCartWithValidCartID
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:18:51' prior: 50783881!
test09ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:20:00' prior: 50783900!
test09ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID )! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:21:20' prior: 50783923!
test09ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: bookISBN -> 1).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID )! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:21:38' prior: 50783949!
test09ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: bookISBN -> 1).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!testRun: #InternalInterfaceTest #test09ListCartWithValidCartID stamp: 'gc 11/7/2019 21:21:40'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:22:04'!
test09ListEmptyCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: bookISBN -> 1).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:22:14'!
test10ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: bookISBN -> 1).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test09ListCartWithValidCartID stamp: 'gc 11/7/2019 21:22:14'!
test09ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: bookISBN -> 1).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:22:28' prior: 50784008!
test09ListEmptyCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/7/2019 21:22:29'!
ERROR!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/7/2019 21:22:45'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:24:02' prior: 50783839!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^Bag new.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/7/2019 21:24:10'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/7/2019 21:24:10'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/7/2019 21:24:10'!
ERROR!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/7/2019 21:24:20'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/7/2019 21:24:20'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/7/2019 21:24:20'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/7/2019 21:24:53' prior: 50784036!
test10ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: {bookISBN -> 1}).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/7/2019 21:24:56'!
FAILURE!

----SNAPSHOT----(7 November 2019 21:25:03) CuisUniversity-3938.image priorSource: 14447074!

----SNAPSHOT----(8 November 2019 10:45:22) CuisUniversity-3938.image priorSource: 14483100!

----QUIT----(8 November 2019 10:50:11) CuisUniversity-3938.image priorSource: 14483193!

----STARTUP---- (11 November 2019 16:50:20) as /home/chiara/Documents/UBA/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!

!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:08:22'!
test10ListCartWithValidCartIDWorks
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: {bookISBN -> 1}).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/11/2019 17:08:22'!
test10ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: {bookISBN -> 1}).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:08:38'!
test09ListEmptyCartWithValidCartIDReturnsEmptyList
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/11/2019 17:08:38'!
test09ListEmptyCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:08:44'!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyList stamp: 'gc 11/11/2019 17:08:44'!
test09ListEmptyCartWithValidCartIDReturnsEmptyList
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:08:50'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:08:55'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:08:55'!
FAILURE!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:08:55'!
FAILURE!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:40:02'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:40:02'!
FAILURE!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:40:02'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:45:24' prior: 50784261!
test10ListCartWithValidCartIDWorks
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:45:50' prior: 50784371!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:45:55'!
FAILURE!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:45:55'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:46:13' prior: 50784126!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^Dictionary new.! !

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:46:28'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:46:31'!
FAILURE!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:46:31'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:47:21' prior: 50784577!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cart list.
	"Dictionary new."! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:47:26' prior: 50784596!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cart list.
	! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 17:47:28'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:47:28'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:47:28'!
ERROR!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:47:31'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:47:41'!
list
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:51:54' prior: 50784653!
list
	| listedItems |
	listedItems _ Dictionary new.
	(items asSet) collect: [:anItem | listedItems at: anItem put: (self occurrencesOf: anItem).].
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:52:37' prior: 50784657!
list
	| listedItems |
	listedItems _ Dictionary new.
	(items asSet) collect: [:anItem | listedItems at: anItem put: (self occurrencesOf: anItem).].
	^listedItems .! !

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:53:10'!
FAILURE!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:53:19'!
FAILURE!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:53:19'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:53:36'!
FAILURE!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:53:36'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:53:36'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:55:37' prior: 50784541!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:55:52' prior: 50784728!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 17:55:53'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 17:55:53'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:00:54'!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:01:45' prior: 50784817!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:01:48'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:02:52' prior: 50784845!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:04:24' prior: 50784868!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:06:25' prior: 50784888!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:06:26'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:06:38'!
checkOutCart: aString charging: aCreditCard 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:07:07' prior: 50784936!
checkOutCart: aCartID charging: aCreditCard 
	^self error: self invalidCartIDErrorMessage .! !

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:07:09'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:07:42'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:07:42'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:07:55' prior: 50784942!
checkOutCart: aCartID charging: aCreditCard 
	^self error: self class invalidCartIDErrorMessage .! !

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:07:56'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:08:27'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:08:27'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:09:21'!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:09:31' prior: 50785015!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:10:49' prior: 50785038!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CreditCard . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:11:58' prior: 50785060!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:12:00'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:15:46' prior: 50784960!
checkOutCart: aCartID charging: aCreditCard 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^self error: Cashier invalidCartIDErrorMessage .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:15:51'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:15:51'!
FAILURE!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:15:51'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:15:58' prior: 50785108!
checkOutCart: aCartID charging: aCreditCard 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:16:01'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:16:01'!
FAILURE!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:16:01'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:18:31' prior: 50785082!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:18:34'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:19:29'!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 18:19:30'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:20:57' prior: 50785167!
checkOutCart: aCartID charging: aCreditCard 
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."! !

Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 18:22:40'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/11/2019 18:23:04' prior: 50783281!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook! !
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/11/2019 18:23:27' prior: 50785314!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50'!
checkOutCart: aCartID charging: aCreditCard processingOn: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50' prior: 50785256!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard processingOn: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50' prior: 50785226!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard processingOn: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50' prior: 50784910!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard processingOn: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!methodRemoval: InternalInterface #checkOutCart:charging: stamp: 'gc 11/11/2019 18:24:50'!
checkOutCart: aCartID charging: aCreditCard 
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07'!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07' prior: 50785348!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07' prior: 50785375!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07' prior: 50785403!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!methodRemoval: InternalInterface #checkOutCart:charging:processingOn: stamp: 'gc 11/11/2019 18:26:07'!
checkOutCart: aCartID charging: aCreditCard processingOn: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."!
!Cashier methodsFor: 'initialization' stamp: 'gc 11/11/2019 18:26:54'!
initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:54' prior: 50781423!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'gc 11/11/2019 18:26:54'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:28:38' prior: 50785438!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
"	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (GregorianDate ) registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage .
	"! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:30:51' prior: 50785578!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	^cashier checkOut ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:30:55'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:30:55'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 18:30:55'!
ERROR!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:30:58'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:31' prior: 50785594!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	^cashier checkOut ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/11/2019 18:31:54'!
toCheckout: aCart charging: aCreditCard through: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781571!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		through: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781529!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781485!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781464!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				through: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781553!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			through: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781503!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'gc 11/11/2019 18:31:54'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:32:02'!
FAILURE!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 18:32:02'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:32:02'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:34:01' prior: 50785480!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:34:04'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:34:10'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 18:34:10'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:35:49'!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:36:31' prior: 50786011!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:40:37' prior: 50786033!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN total bookPrice|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: (internalInterface lastRegisteredIs: total).
	self assert: bookPrice equals: total.
 
	
	! !
!InternalInterfaceTest methodsFor: 'nil' stamp: 'gc 11/11/2019 18:41:08'!
debit: anAmount from: aCreditCard 
! !

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:41:18'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:41:25'!
lastRegisteredIs: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:42:28' prior: 50786098!
lastRegisteredIs: aSale
	 ^salesBook last = aSale ! !

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:42:31'!
FAILURE!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:43:17'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:43:44' prior: 50786059!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN total bookPrice|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: bookPrice equals: total.
 	self assert: (internalInterface lastRegisteredIs: total).
	
	! !

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:43:45'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:44:06' prior: 50786104!
lastRegisteredIs: aSale
	 ^(salesBook last) = aSale ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 18:44:08'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:44:08'!
FAILURE!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:44:08'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:45:24' prior: 50786152!
lastRegisteredIs: aTotal
	 ^(salesBook last total) = aTotal! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 18:45:25'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 18:45:25'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:58:44'!
test15listPurchasesOfClientThatDidntBuyReturns0
	| internalInterface userList creditCard user password bookISBN  bookPrice listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:59:47' prior: 50786271!
test15listPurchasesOfClientThatDidntBuyReturns0
	| internalInterface userList user password  listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 18:59:52'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:59:58'!
listPurchasesOf: aString with: aString2 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:00:31' prior: 50786327!
listPurchasesOf: aUser with: aPassword 
	^Dictionary new! !

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 19:00:33'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:00:40'!
purchasedAmountOf: aString with: aString2 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:00:53' prior: 50786342!
purchasedAmountOf: aUser with: aPassword 
	^0! !

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 19:00:55'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 19:00:55'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:01:34'!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:03:24' prior: 50786413!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  listedPurchases purchasedAmount |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .

	self
		should: [ listedPurchases _ internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:58:05' prior: 50786436!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
	
	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:58:16' prior: 50786463!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
	"
	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]"! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 19:58:36'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 19:58:36'!
FAILURE!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 19:58:36'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:59:03' prior: 50786333!
listPurchasesOf: aUser with: aPassword 
	
	^Dictionary new! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:00:05' prior: 50786586!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	"(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage]."
	^Dictionary new! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:00:23'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:00:23'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:00:52'!
test17purchasedAmountOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:01:00' prior: 50786493!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
! !

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:01:03'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:01:03'!
FAILURE!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:01:03'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:01:45' prior: 50786348!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	^0! !

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:01:58'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:01:58'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:02:08'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:02:08'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:02:52'!
test18listPurchasesWithInvalidPasswordFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:02:54'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:03:09' prior: 50786592!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^Dictionary new! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:03:14'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:03:14'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:03:49'!
test19purchasedAmountWithInvalidPasswordFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface purchasedAmountOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:03:50'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:04:09' prior: 50786781!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^0! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:04:11'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:04:11'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:05:12'!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:10:51' prior: 50787076!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory itemSellByTheStore .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart1 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: listedPurchases equals: expectedListedPurchases .! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:10:52'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:11:31' prior: 50787099!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart1 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: listedPurchases equals: expectedListedPurchases .! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:11:33'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:11:48' prior: 50787144!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart1 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:11:49'!
FAILURE!

Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook listedPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 20:12:57'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook listedPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:13:33' prior: 50785661!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: cart.	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:14:07'!
addToListedPurchases: aCart
	! !

----STARTUP---- (11 November 2019 20:40:53) as /home/chiara/Documents/UBA/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!

!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:08:22'!
test10ListCartWithValidCartIDWorks
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: {bookISBN -> 1}).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test10ListCartWithValidCartID stamp: 'gc 11/11/2019 20:40:59'!
test10ListCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag with: (Dictionary newFrom: {bookISBN -> 1}).
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:08:38'!
test09ListEmptyCartWithValidCartIDReturnsEmptyList
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test09ListEmptyCartWithValidCartID stamp: 'gc 11/11/2019 20:40:59'!
test09ListEmptyCartWithValidCartID
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:08:44'!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !

!methodRemoval: InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyList stamp: 'gc 11/11/2019 20:40:59'!
test09ListEmptyCartWithValidCartIDReturnsEmptyList
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Bag new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:45:24' prior: 50787272!
test10ListCartWithValidCartIDWorks
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:45:50' prior: 50787382!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:46:13' prior: 50784126!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^Dictionary new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:47:21' prior: 50787494!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cart list.
	"Dictionary new."! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:47:26' prior: 50787502!
listCart: aCartID 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cart list.
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:47:41'!
list
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:51:54' prior: 50787517!
list
	| listedItems |
	listedItems _ Dictionary new.
	(items asSet) collect: [:anItem | listedItems at: anItem put: (self occurrencesOf: anItem).].
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:52:37' prior: 50787521!
list
	| listedItems |
	listedItems _ Dictionary new.
	(items asSet) collect: [:anItem | listedItems at: anItem put: (self occurrencesOf: anItem).].
	^listedItems .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:55:37' prior: 50787466!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 17:55:52' prior: 50787538!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:00:54'!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:01:45' prior: 50787585!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:02:52' prior: 50787613!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:04:24' prior: 50787633!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:06:25' prior: 50787653!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:06:38'!
checkOutCart: aString charging: aCreditCard 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:07:07' prior: 50787697!
checkOutCart: aCartID charging: aCreditCard 
	^self error: self invalidCartIDErrorMessage .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:07:55' prior: 50787703!
checkOutCart: aCartID charging: aCreditCard 
	^self error: self class invalidCartIDErrorMessage .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:09:21'!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:09:31' prior: 50787716!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:10:49' prior: 50787739!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CreditCard . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:11:58' prior: 50787761!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory expiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:15:46' prior: 50787710!
checkOutCart: aCartID charging: aCreditCard 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^self error: Cashier invalidCartIDErrorMessage .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:15:58' prior: 50787806!
checkOutCart: aCartID charging: aCreditCard 
	| cart |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:18:31' prior: 50787783!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:19:29'!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:20:57' prior: 50787816!
checkOutCart: aCartID charging: aCreditCard 
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."! !

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 20:40:59'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 20:40:59'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/11/2019 18:23:04' prior: 50783281!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook! !
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/11/2019 18:23:27' prior: 50787912!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartOwners _ Dictionary new.
	carts _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50'!
checkOutCart: aCartID charging: aCreditCard processingOn: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50' prior: 50787854!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard processingOn: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50' prior: 50787827!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard processingOn: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:24:50' prior: 50787675!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard processingOn: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!methodRemoval: InternalInterface #checkOutCart:charging: stamp: 'gc 11/11/2019 20:40:59'!
checkOutCart: aCartID charging: aCreditCard 
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07'!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07' prior: 50787946!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07' prior: 50787973!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:07' prior: 50788001!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!methodRemoval: InternalInterface #checkOutCart:charging:processingOn: stamp: 'gc 11/11/2019 20:40:59'!
checkOutCart: aCartID charging: aCreditCard processingOn: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	
	"cashier _ Cashier toCheckout: cart charging: aCreditCard throught:  on:  registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage ."!
!Cashier methodsFor: 'initialization' stamp: 'gc 11/11/2019 18:26:54'!
initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:26:54' prior: 50781423!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'gc 11/11/2019 20:40:59'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:28:38' prior: 50788036!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
"	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (GregorianDate ) registeringOn: .
	^self error: Cashier canNotChargeAnExpiredCreditCardErrorMessage .
	"! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:30:51' prior: 50788176!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:31' prior: 50788192!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	^cashier checkOut ! !
!Cashier class methodsFor: 'instance creation' stamp: 'gc 11/11/2019 18:31:54'!
toCheckout: aCart charging: aCreditCard through: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781571!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		through: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781529!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781485!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781464!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				through: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781553!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			through: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:31:54' prior: 50781503!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'gc 11/11/2019 20:40:59'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:34:01' prior: 50788078!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:35:49'!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:36:31' prior: 50788405!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:40:37' prior: 50788427!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN total bookPrice|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: (internalInterface lastRegisteredIs: total).
	self assert: bookPrice equals: total.
 
	
	! !
!InternalInterfaceTest methodsFor: 'nil' stamp: 'gc 11/11/2019 18:41:08'!
debit: anAmount from: aCreditCard 
! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:41:25'!
lastRegisteredIs: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:42:28' prior: 50788488!
lastRegisteredIs: aSale
	 ^salesBook last = aSale ! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:43:44' prior: 50788453!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN total bookPrice|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: bookPrice equals: total.
 	self assert: (internalInterface lastRegisteredIs: total).
	
	! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:44:06' prior: 50788494!
lastRegisteredIs: aSale
	 ^(salesBook last) = aSale ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:45:24' prior: 50788530!
lastRegisteredIs: aTotal
	 ^(salesBook last total) = aTotal! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:58:44'!
test15listPurchasesOfClientThatDidntBuyReturns0
	| internalInterface userList creditCard user password bookISBN  bookPrice listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:59:47' prior: 50788540!
test15listPurchasesOfClientThatDidntBuyReturns0
	| internalInterface userList user password  listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 18:59:58'!
listPurchasesOf: aString with: aString2 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:00:31' prior: 50788592!
listPurchasesOf: aUser with: aPassword 
	^Dictionary new! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:00:40'!
purchasedAmountOf: aString with: aString2 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:00:53' prior: 50788603!
purchasedAmountOf: aUser with: aPassword 
	^0! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:01:34'!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:03:24' prior: 50788614!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  listedPurchases purchasedAmount |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .

	self
		should: [ listedPurchases _ internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:58:05' prior: 50788637!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
	
	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:58:16' prior: 50788664!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
	"
	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]"! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 19:59:03' prior: 50788598!
listPurchasesOf: aUser with: aPassword 
	
	^Dictionary new! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:00:05' prior: 50788724!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	"(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage]."
	^Dictionary new! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:00:52'!
test17purchasedAmountOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:01:00' prior: 50788694!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:01:45' prior: 50788609!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	^0! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:02:52'!
test18listPurchasesWithInvalidPasswordFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:03:09' prior: 50788730!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^Dictionary new! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:03:49'!
test19purchasedAmountWithInvalidPasswordFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface purchasedAmountOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:04:09' prior: 50788788!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^0! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:05:12'!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:10:51' prior: 50788867!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory itemSellByTheStore .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart1 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: listedPurchases equals: expectedListedPurchases .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:11:31' prior: 50788890!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart1 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: listedPurchases equals: expectedListedPurchases .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:11:48' prior: 50788931!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart1 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 20:40:59'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook listedPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 20:40:59'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook listedPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:13:33' prior: 50788206!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ carts at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: cart.	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:14:07'!
addToListedPurchases: aCart
	! !

----SNAPSHOT----(11 November 2019 20:41:51) CuisUniversity-3938.image priorSource: 14483286!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:41:54'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:41:54'!
FAILURE!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:42:01'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:42:01'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:42:01'!
FAILURE!

----SNAPSHOT----(11 November 2019 20:42:25) CuisUniversity-3938.image priorSource: 14636768!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:43:12' prior: 50788820!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	
	^Dictionary new! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:44:43' prior: 50789046!
addToListedPurchases: aCart
! !

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/11/2019 20:46:41'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID carts catalog salesBook listedPurchases cartsAndOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/11/2019 20:46:39' prior: 50787921!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	"cartOwners _ Dictionary new.
	carts _ Dictionary new."
	cartsAndOwners _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.! !
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/11/2019 20:48:37' prior: 50782919!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart item |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	"cartOwners at: cartID put: aUser ."
	cart _ Cart acceptingItemsOf: catalog.
	"carts at: cartID put: cart ."
	item _ Dictionary newFrom: {'owner'->aUser,'cart'->cart}.
	cartsAndOwners at: cartID put: item.
	^cartID ! !
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/11/2019 20:49:00' prior: 50789181!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart cartData |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	"cartOwners at: cartID put: aUser ."
	cart _ Cart acceptingItemsOf: catalog.
	"carts at: cartID put: cart ."
	cartData _ Dictionary newFrom: {'owner'->aUser,'cart'->cart}.
	cartsAndOwners at: cartID put: cartData.
	^cartID ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:49:31' prior: 50783352!
cart: aCartID has: aBookISBN
	^((cartsAndOwners at: aCartID ) at: 'cart') includes: aBookISBN .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:49:49' prior: 50789031!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cart cashier |
	cart _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: cart.	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:50:13' prior: 50783696!
getCartWith: aCartID 
	^(cartsAndOwners at: aCartID) at: 'cart'.! !
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/11/2019 20:51:55' prior: 50782830!
hasNoCarts
	^cartsAndOwners isEmpty . ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:52:22' prior: 50787510!
listCart: aCartID 
	| cart |
	cart _ (cartsAndOwners at: aCartID) at: 'cart' ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cart list.
	! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:52:46' prior: 50789256!
listCart: aCartID 
	| cart |
	cart _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cart list.
	! !
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/11/2019 20:53:20' prior: 50782835!
ownerOf: aCartID 
	^(cartsAndOwners at: aCartID) at: 'owner'! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:53:33' prior: 50783197!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cart |
	cart _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	cart add: anAmount of: aBookISBN .	! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:54:08'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:54:08'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:54:08'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:54:08'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:54:08'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:54:09'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:54:09'!
ERROR!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:55:01'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:55:01'!
ERROR!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:55:03'!
ERROR!
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/11/2019 20:55:40' prior: 50789202!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart cartData |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	"cartOwners at: cartID put: aUser ."
	cart _ Cart acceptingItemsOf: catalog.
	"carts at: cartID put: cart ."
	cartData _ Dictionary newFrom: {'owner'->aUser. 'cart'->cart}.
	cartsAndOwners at: cartID put: cartData.
	^cartID ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:55:43'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:55:46'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:55:46'!
ERROR!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:55:48'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:56:36' prior: 50789279!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cartData |
	cartData _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	(cartData at: 'cart') add: anAmount of: aBookISBN .	! !

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:56:39'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:56:40'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:56:41'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:56:41'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:56:41'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:56:41'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:56:41'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:56:41'!
ERROR!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:56:41'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:56:41'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:56:41'!
ERROR!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:56:41'!
ERROR!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:56:42'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:57:11' prior: 50789265!
listCart: aCartID 
	| cartData |
	cartData _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^(cartData at: 'cart' ) list.
	! !

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:57:16'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:57:18'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:57:18'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:57:18'!
ERROR!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:57:18'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:57:19'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/11/2019 20:58:07' prior: 50789230!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartData cart cashier |
	cartData _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cart _ cartData at: 'cart'.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: cart.	
	^cashier checkOut ! !

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:58:09'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/11/2019 20:58:11'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:58:11'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/11/2019 20:58:11'!
FAILURE!

----SNAPSHOT----(11 November 2019 20:58:17) CuisUniversity-3938.image priorSource: 14639660!

----SNAPSHOT----(12 November 2019 08:21:37) CuisUniversity-3938.image priorSource: 14661767!

----QUIT----(12 November 2019 08:21:42) CuisUniversity-3938.image priorSource: 14661861!

----STARTUP---- (14 November 2019 17:46:29) as /home/gzeitoune/Documents/UBA/ingSoft1/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!


!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 17:48:54'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 17:48:54'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 17:48:54'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:16:15'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:16:15'!
FAILURE!
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/14/2019 19:18:45' prior: 50782155!
hasACartWith: aCartID 
	carts at: aCartID ifAbsent: [^false].
	^true
! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:18:48'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:18:48'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:18:48'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:18:48'!
FAILURE!

Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID catalog salesBook listedPurchases cartsAndOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/14/2019 19:19:14'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList cartOwners nextCartID catalog salesBook listedPurchases cartsAndOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/14/2019 19:19:30' prior: 50789932!
hasACartWith: aCartID 
	cartsAndOwners at: aCartID ifAbsent: [^false].
	^true
! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:19:32'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:19:32'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:19:33'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:20:42' prior: 50789156!
addToListedPurchases: aCart
	^listedPurchases add: 'aa'.! !
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/14/2019 19:21:08' prior: 50789170!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartsAndOwners _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:21:52' prior: 50789732!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartData cart cashier |
	cartData _ cartsAndOwners at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cart _ cartData at: 'cart'.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: aCartID.	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:23:23' prior: 50790114!
addToListedPurchases: aCartID
	| cart cartData owner |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	^listedPurchases at: owner put: (cart list).! !
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/14/2019 19:23:46' prior: 50790119!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartsAndOwners _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.
	listedPurchases _ Dictionary new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:24:18' prior: 50789144!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	
	^listedPurchases ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:24:23'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:24:23'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:24:23'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:24:43' prior: 50790167!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	
	^listedPurchases at: aUser ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:24:44'!
ERROR!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:24:44'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:24:44'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:25:33' prior: 50790259!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	
	^listedPurchases at: aUser ifAbsent: [^Dictionary new]! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:25:34'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:25:34'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:25:34'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:29:21' prior: 50790347!
listPurchasesOf: aUser with: aPassword 
	| recordedPassword|
	
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	
	^listedPurchases at: aUser ifAbsent: [^Dictionary new]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:33:58' prior: 50790146!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	(cart list) collect: [:item | | amount | 
		amount _ previousPurchases at: (item key) ifAbsent: [0]. 
		previousPurchases at: (item key) put: amount + (item value) .
	].
	listedPurchases at: owner put: (cart list).! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:34:02'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:34:02'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:34:02'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:34:09'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:35:07' prior: 50790454!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	(cart list) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		previousPurchases at: (item key) put: amount + (item value) .
	].
	listedPurchases at: owner put: (cart list).! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:36:03' prior: 50790551!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	(cart list) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		previousPurchases at: (item key) put: amount + (item value) .
	].
	listedPurchases at: owner put: (cart list).! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:36:06'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:36:06'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:36:06'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:36:08'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:36:35' prior: 50790569!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	(cart list) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		previousPurchases at: (item) put: amount + (item value) .
	].
	listedPurchases at: owner put: (cart list).! !

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:36:39'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:36:43'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:38:54' prior: 50790666!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		previousPurchases at: (item) put: amount + (item value) .
	].
	listedPurchases at: owner put: (cart list).! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:38:58'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:40:21' prior: 50790692!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		previousPurchases at: (item) put: amount + (list at: item) .
	].
	listedPurchases at: owner put: (cart list).! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:40:22'!
FAILURE!

(list at: item)!

(list at: item)!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:42:50' prior: 50790715!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		previousPurchases at: (item) put: amount + (list at: item) .
	].
	listedPurchases at: owner put: previousPurchases.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:43:07' prior: 50790739!
addToListedPurchases: aCartID
	| cart cartData owner previousPurchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	previousPurchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ previousPurchases at: item ifAbsent: [0]. 
		listedPurchases at: (item) put: amount + (list at: item) .
	].! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:44:33' prior: 50790758!
addToListedPurchases: aCartID
	| cart cartData owner purchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	purchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ purchases at: item ifAbsent: [0]. 
		purchases at: (item) put: amount + (list at: item) .
	].

	listedPurchases at: owner put: purchases .! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:44:35'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:45:38' prior: 50790775!
addToListedPurchases: aCartID
	| cart cartData owner purchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	purchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ purchases at: item ifAbsent: [0]. 
		purchases at: (item) put: (amount + (list at: item)) .
	].

	listedPurchases at: owner put: purchases .! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:45:39'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:48:58' prior: 50790797!
addToListedPurchases: aCartID
	| cart cartData owner purchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	purchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ purchases at: item ifAbsent: [0]. 
		purchases at: (item) put: (amount + (cart at: item)) .
	].

	listedPurchases at: owner put: purchases .! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:49:00'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 19:50:24' prior: 50790819!
addToListedPurchases: aCartID
	| cart cartData owner purchases list |
	cartData _ cartsAndOwners at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	purchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ purchases at: item ifAbsent: [0]. 
		purchases at: (item) put: (amount + (list at: item)) .
	].

	listedPurchases at: owner put: purchases .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:50:39'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:50:39'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:50:39'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'gc 11/14/2019 19:53:34' prior: 50781211!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'gc 11/14/2019 19:53:42'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:53:46'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:53:46'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:53:46'!
FAILURE!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 19:55:09'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:55:09'!
FAILURE!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 19:55:09'!
FAILURE!

self list!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:03:14' prior: 50788972!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard total listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:03:17'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:03:22'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:03:22'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:06:01'!
test21listPurchasedAmountOfClientThatBoughtReturnsTotal
	| internalInterface userList user password cart1 cart2 book creditCard total purchasedAmount |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password.
	
	self assert: total equals: purchasedAmount.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:06:14' prior: 50791129!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	(internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:06:20' prior: 50791286!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	internalInterface checkOutCart: cart2 charging: creditCard through: self.
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:06:24'!
FAILURE!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:06:24'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:11:18' prior: 50788855!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^(self listPurchasesOf: aUser with: aPassword ) inject: 0 into: [:sum :each | sum + catalog at: (each key) * (each value)]! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:11:23'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:11:23'!
ERROR!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:11:23'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:11:38' prior: 50791374!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^(self listPurchasesOf: aUser with: aPassword ) inject: 0 into: [:sum :each | sum + catalog at: each * (each)]! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:11:40'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:11:40'!
ERROR!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:11:40'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:11:54' prior: 50791473!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^(self listPurchasesOf: aUser with: aPassword ) inject: 0 into: [:sum :each | sum ]! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:11:55'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:11:55'!
FAILURE!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:11:55'!
FAILURE!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:12:17'!
FAILURE!

----SNAPSHOT----(14 November 2019 20:13:03) CuisUniversity-3938.image priorSource: 14661955!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:13:04'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:13:04'!
FAILURE!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:13:04'!
FAILURE!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:13:15'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:13:15'!
FAILURE!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:13:15'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:14:27' prior: 50791572!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	^((self listPurchasesOf: aUser with: aPassword ) keys) inject: 0 into: [:sum :each | sum ]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:15:47' prior: 50791844!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword purchases |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	purchases _ self listPurchasesOf: aUser with: aPassword.
	^( purchases keys) inject: 0 into: [:sum :each | sum + catalog at: each * (purchases at: each) ]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:16:10' prior: 50791859!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword purchases |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	purchases _ self listPurchasesOf: aUser with: aPassword.
	^( purchases keys) inject: 0 into: [:sum :each | sum + (catalog at: each * (purchases at: each) )]! !

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:16:17'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:16:39' prior: 50791876!
purchasedAmountOf: aUser with: aPassword 

	| recordedPassword purchases |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	purchases _ self listPurchasesOf: aUser with: aPassword.
	^( purchases keys) inject: 0 into: [:sum :each | sum + ((catalog at: each) * (purchases at: each) )]! !

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:16:56'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/14/2019 20:16:58'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/14/2019 20:16:58'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/14/2019 20:19:44'!
test22CheckOutCart30MinAfterLastTransactionFails
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog).
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !

----SNAPSHOT----(14 November 2019 20:34:13) CuisUniversity-3938.image priorSource: 14720719!

----SNAPSHOT----(14 November 2019 20:34:20) CuisUniversity-3938.image priorSource: 14731923!

----SNAPSHOT----(14 November 2019 20:40:30) CuisUniversity-3938.image priorSource: 14732017!

----QUIT----(14 November 2019 20:40:33) CuisUniversity-3938.image priorSource: 14732111!

----STARTUP---- (17 November 2019 14:28:06) as /Users/ctarzia/Documents/UBA/ing-soft-1/25-TusLibros/CuisUniversity-3938.image!

!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/17/2019 14:43:04'!
initializeWithUserList: aUserList andCatalog: aCatalog withClock: aClock   
	userList _ aUserList.
	cartsAndOwners _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.
	listedPurchases _ Dictionary new.! !
!InternalInterface class methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:43:04' prior: 50783241!
withUserList: aUserList andCatalog: aCatalog  
	^self new initializeWithUserList: aUserList andCatalog: aCatalog withClock: clock ! !

!methodRemoval: InternalInterface #initializeWithUserList:andCatalog: stamp: 'gc 11/17/2019 14:43:04'!
initializeWithUserList: aUserList andCatalog: aCatalog  
	userList _ aUserList.
	cartsAndOwners _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.
	listedPurchases _ Dictionary new.!
!InternalInterface class methodsFor: 'instance creation' stamp: 'gc 11/17/2019 14:44:32'!
withUserList: aUserList andCatalog: aCatalog andClock: aClock   
	^self new initializeWithUserList: aUserList andCatalog: aCatalog withClock: clock ! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50783660!
test07CantAddToCartWithInvalidISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface getCartWith: cartID) invalidItemErrorMessage .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50787563!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	| internalInterface userList cartID aPassword aUserName expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50783449!
test06CanAddToCartWithValidCartIDAndISBN
	| internalInterface userList cartID bookISBN aPassword aUserName |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50791997!
test22CheckOutCart30MinAfterLastTransactionFails
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788499!
test14checkOutCartCorrectlyChecksOut
	| internalInterface userList cartID creditCard user password bookISBN total bookPrice|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: bookPrice equals: total.
 	self assert: (internalInterface lastRegisteredIs: total).
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50783770!
test05CantAddToCartWithInvalidCartID
	| internalInterface userList cartID bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
		]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788765!
test16listPurchasesOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50791248!
test21listPurchasedAmountOfClientThatBoughtReturnsTotal
	| internalInterface userList user password cart1 cart2 book creditCard total purchasedAmount |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password.
	
	self assert: total equals: purchasedAmount.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788832!
test19purchasedAmountWithInvalidPasswordFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.

	self
		should: [internalInterface purchasedAmountOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50782992!
test04DifferentCartsHaveDifferentIDs
	| internalInterface aUserName aPassword userList cartID1 cartID2 |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID1 _ internalInterface createCartFor: aUserName with: aPassword .
	cartID2 _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID1 ).
	self assert: (internalInterface hasACartWith: cartID2 ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID1).
	self assert: aUserName equals: (internalInterface ownerOf: cartID2).
	self deny: cartID1 = cartID2.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788106!
test11checkOutCartWithInvalidIDShouldFail
	| internalInterface userList cartID creditCard|
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788569!
test15listPurchasesOfClientThatDidntBuyReturns0
	| internalInterface userList user password  listedPurchases purchasedAmount|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50791326!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| internalInterface userList user password cart1 cart2 book creditCard listedPurchases expectedListedPurchases|
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	internalInterface checkOutCart: cart2 charging: creditCard through: self.
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788374!
test12checkOutCartWithExpiredCardShouldFail
	| internalInterface userList cartID creditCard user password bookISBN |
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788797!
test18listPurchasesWithInvalidPasswordFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.

	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788742!
test17purchasedAmountOfInvalidClientFails
	| internalInterface userList user password  |
	
	userList  _ testObjectsFactory defaultUserList .
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.

	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50783751!
test08CantListCartWithInvalidCartID
	| internalInterface userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	self
		should: [ internalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50783021!
test02CreateCartForAnInvalidUserDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	aUserName _ testObjectsFactory invalidUserOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidUserErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50782943!
test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	| internalInterface aUserName aPassword userList |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50787438!
test10ListCartWithValidCartIDWorks
	| internalInterface userList cartID aPassword aUserName bookISBN expectedListedCart |
	
	userList  _ testObjectsFactory defaultUserList .
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50788051!
test13checkOutCartWithEmptyCartShouldFail
	| internalInterface userList cartID creditCard user password|
	
	userList  _ testObjectsFactory defaultUserList .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:44:32' prior: 50783070!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList cartID |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !

!methodRemoval: InternalInterface class #withUserList:andCatalog: stamp: 'gc 11/17/2019 14:44:32'!
withUserList: aUserList andCatalog: aCatalog  
	^self new initializeWithUserList: aUserList andCatalog: aCatalog withClock: clock !
!InternalInterface class methodsFor: 'instance creation' stamp: 'gc 11/17/2019 14:44:41' prior: 50792069!
withUserList: aUserList andCatalog: aCatalog andClock: aClock   
	^self new initializeWithUserList: aUserList andCatalog: aCatalog withClock: aClock ! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:45:05' prior: 50792644!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList cartID clock |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !

Object subclass: #FakeClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeClock category: #TusLibros stamp: 'gc 11/17/2019 14:46:59'!
Object subclass: #FakeClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:48:07' prior: 50792683!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword userList cartID clock |
	
	userList  _ testObjectsFactory defaultUserList .
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock.
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/17/2019 14:49:13'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory aUserList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/17/2019 14:49:29'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory aUserList aClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/17/2019 14:49:39'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory aUserList aClock anInternalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:49:56' prior: 50781940!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.
	aUserList  _ testObjectsFactory defaultUserList .
	aClock _ FakeClock new.
	anInternalInterface _ InternalInterface withUserList: aUserList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: aClock .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:50:15' prior: 50792716!
test01CreateCartForAValidUserAndPasswordCreatesACart
	| internalInterface aUserName aPassword cartID |
	

	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !

TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory userList aClock anInternalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory userList aClock anInternalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:51:48' prior: 50792536!
test02CreateCartForAnInvalidUserDoesntCreateACart
	|  aUserName aPassword  |
	
	aUserName _ testObjectsFactory invalidUserOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .

	self
		should: [anInternalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidUserErrorMessage.
			self assert: anInternalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:52:08' prior: 50792561!
test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	|  aUserName aPassword  |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [anInternalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: anInternalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:52:29' prior: 50792320!
test04DifferentCartsHaveDifferentIDs
	|  aUserName aPassword  cartID1 cartID2 |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID1 _ anInternalInterface createCartFor: aUserName with: aPassword .
	cartID2 _ anInternalInterface createCartFor: aUserName with: aPassword .
	self assert: (anInternalInterface hasACartWith: cartID1 ).
	self assert: (anInternalInterface hasACartWith: cartID2 ).
	self assert: aUserName equals: (anInternalInterface ownerOf: cartID1).
	self assert: aUserName equals: (anInternalInterface ownerOf: cartID2).
	self deny: cartID1 = cartID2.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:53:00' prior: 50792213!
test05CantAddToCartWithInvalidCartID
	|  cartID bookISBN |
	
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	self
		should: [ anInternalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
		]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:53:28' prior: 50792129!
test06CanAddToCartWithValidCartIDAndISBN
	|  cartID bookISBN aPassword aUserName |
	
	bookISBN _ testObjectsFactory validEditorialISBN.

	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ anInternalInterface createCartFor: aUserName with: aPassword .
	
	anInternalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (anInternalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:53:49' prior: 50792078!
test07CantAddToCartWithInvalidISBN
	|  cartID bookISBN aPassword aUserName |
	
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ anInternalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [anInternalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (anInternalInterface getCartWith: cartID) invalidItemErrorMessage .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:55:19' prior: 50792516!
test08CantListCartWithInvalidCartID
	|  cartID |
	
	cartID _ testObjectsFactory invalidCartID.

	self
		should: [ anInternalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:55:46' prior: 50792106!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	|  cartID aPassword aUserName expectedListedCart |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ anInternalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (anInternalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:56:06' prior: 50792587!
test10ListCartWithValidCartIDWorks
	| cartID aPassword aUserName bookISBN expectedListedCart |
	
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ anInternalInterface createCartFor: aUserName with: aPassword .
	
	anInternalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (anInternalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:56:28' prior: 50792350!
test11checkOutCartWithInvalidIDShouldFail
	| cartID creditCard|
	
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	self
		should: [ anInternalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:56:51' prior: 50792438!
test12checkOutCartWithExpiredCardShouldFail
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ anInternalInterface createCartFor: user with: password .
	anInternalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ anInternalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:57:23' prior: 50792616!
test13checkOutCartWithEmptyCartShouldFail
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ anInternalInterface createCartFor: user with: password .
	
	self
		should: [ anInternalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:57:53' prior: 50792181!
test14checkOutCartCorrectlyChecksOut
	| cartID creditCard user password bookISBN total bookPrice|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	cartID _ anInternalInterface createCartFor: user with: password .
	anInternalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ anInternalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: bookPrice equals: total.
 	self assert: (anInternalInterface lastRegisteredIs: total).
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:58:24' prior: 50792374!
test15listPurchasesOfClientThatDidntBuyReturns0
	| user password  listedPurchases purchasedAmount|
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	listedPurchases _ anInternalInterface listPurchasesOf: user with: password.
	purchasedAmount _ anInternalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:58:53' prior: 50792236!
test16listPurchasesOfInvalidClientFails
	| user password  |
	
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [anInternalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:59:18' prior: 50792493!
test17purchasedAmountOfInvalidClientFails
	| user password  |
	
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [anInternalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 14:59:39' prior: 50792470!
test18listPurchasesWithInvalidPasswordFails
	| user password  |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [anInternalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:00:00' prior: 50792297!
test19purchasedAmountWithInvalidPasswordFails
	| user password  |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [anInternalInterface purchasedAmountOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:00:21' prior: 50792398!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| user password cart1 cart2 book creditCard listedPurchases expectedListedPurchases|
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	cart1 _ anInternalInterface createCartFor: user with: password .
	anInternalInterface addToCart: cart1 book: book quantity: 1.
	anInternalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ anInternalInterface createCartFor: user with: password .
	anInternalInterface addToCart: cart2 book: book quantity: 2.
	anInternalInterface checkOutCart: cart2 charging: creditCard through: self.
	
	listedPurchases _ anInternalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:00:46' prior: 50792259!
test21listPurchasedAmountOfClientThatBoughtReturnsTotal
	| user password cart1 cart2 book creditCard total purchasedAmount |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	cart1 _ anInternalInterface createCartFor: user with: password .
	anInternalInterface addToCart: cart1 book: book quantity: 1.
	total _ anInternalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ anInternalInterface createCartFor: user with: password .
	anInternalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (anInternalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	purchasedAmount _ anInternalInterface purchasedAmountOf: user with: password.
	
	self assert: total equals: purchasedAmount.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:01:12' prior: 50792153!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ anInternalInterface createCartFor: user with: password .
	
	self
		should: [ anInternalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:01:56' prior: 50792777!
test01CreateCartForAValidUserAndPasswordCreatesACart
	|  aUserName aPassword cartID |
	

	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ anInternalInterface createCartFor: aUserName with: aPassword .
	self assert: (anInternalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (anInternalInterface ownerOf: cartID).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:05' prior: 50793241!
test01CreateCartForAValidUserAndPasswordCreatesACart
	|  aUserName aPassword cartID |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ anInternalInterface createCartFor: aUserName with: aPassword .
	self assert: (anInternalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (anInternalInterface ownerOf: cartID).! !

----SNAPSHOT----(17 November 2019 15:02:09) CuisUniversity-3938.image priorSource: 14732205!

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/17/2019 15:02:23'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory aUserList aClock internalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792884!
test06CanAddToCartWithValidCartIDAndISBN
	|  cartID bookISBN aPassword aUserName |
	
	bookISBN _ testObjectsFactory validEditorialISBN.

	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self assert: (internalInterface cart: cartID has: bookISBN ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793219!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793085!
test16listPurchasesOfInvalidClientFails
	| user password  |
	
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792868!
test05CantAddToCartWithInvalidCartID
	|  cartID bookISBN |
	
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
		]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792844!
test04DifferentCartsHaveDifferentIDs
	|  aUserName aPassword  cartID1 cartID2 |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID1 _ internalInterface createCartFor: aUserName with: aPassword .
	cartID2 _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID1 ).
	self assert: (internalInterface hasACartWith: cartID2 ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID1).
	self assert: aUserName equals: (internalInterface ownerOf: cartID2).
	self deny: cartID1 = cartID2.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793257!
test01CreateCartForAValidUserAndPasswordCreatesACart
	|  aUserName aPassword cartID |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	self assert: (internalInterface hasACartWith: cartID ).
	self assert: aUserName equals: (internalInterface ownerOf: cartID).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792977!
test11checkOutCartWithInvalidIDShouldFail
	| cartID creditCard|
	
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792806!
test02CreateCartForAnInvalidUserDoesntCreateACart
	|  aUserName aPassword  |
	
	aUserName _ testObjectsFactory invalidUserOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidUserErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792765!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.
	aUserList  _ testObjectsFactory defaultUserList .
	aClock _ FakeClock new.
	internalInterface _ InternalInterface withUserList: aUserList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: aClock .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792902!
test07CantAddToCartWithInvalidISBN
	|  cartID bookISBN aPassword aUserName |
	
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface getCartWith: cartID) invalidItemErrorMessage .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793153!
test20listPurchasesOfClientThatBoughtReturnsPurchases
	| user password cart1 cart2 book creditCard listedPurchases expectedListedPurchases|
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	internalInterface checkOutCart: cart2 charging: creditCard through: self.
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	expectedListedPurchases _ Dictionary newFrom: {book -> 3}.
	
	self assert: expectedListedPurchases equals: listedPurchases.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792825!
test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart
	|  aUserName aPassword  |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory invalidPasswordOfUserOfTheStore .

	self
		should: [internalInterface createCartFor: aUserName with: aPassword .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidPasswordErrorMessage.
			self assert: internalInterface hasNoCarts ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792955!
test10ListCartWithValidCartIDWorks
	| cartID aPassword aUserName bookISBN expectedListedCart |
	
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	cartID _ testObjectsFactory invalidCartID.
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	expectedListedCart _ Dictionary newFrom: {bookISBN -> 1}.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793020!
test13checkOutCartWithEmptyCartShouldFail
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792938!
test09ListEmptyCartWithValidCartIDReturnsEmptyCollection
	|  cartID aPassword aUserName expectedListedCart |
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	expectedListedCart _ Dictionary new.
	
	self assert: expectedListedCart equals: (internalInterface listCart: cartID ).! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793067!
test15listPurchasesOfClientThatDidntBuyReturns0
	| user password  listedPurchases purchasedAmount|
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	listedPurchases _ internalInterface listPurchasesOf: user with: password.
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password .
	
	self assert: listedPurchases isEmpty .
	self assert: purchasedAmount equals: 0.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793041!
test14checkOutCartCorrectlyChecksOut
	| cartID creditCard user password bookISBN total bookPrice|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	bookPrice _ testObjectsFactory itemSellByTheStorePrice .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	total _ internalInterface checkOutCart: cartID charging: creditCard through: self . 
	
	self assert: bookPrice equals: total.
 	self assert: (internalInterface lastRegisteredIs: total).
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792994!
test12checkOutCartWithExpiredCardShouldFail
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793187!
test21listPurchasedAmountOfClientThatBoughtReturnsTotal
	| user password cart1 cart2 book creditCard total purchasedAmount |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password.
	
	self assert: total equals: purchasedAmount.! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793119!
test18listPurchasesWithInvalidPasswordFails
	| user password  |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793102!
test17purchasedAmountOfInvalidClientFails
	| user password  |
	
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [internalInterface purchasedAmountOf: user with: password . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50793136!
test19purchasedAmountWithInvalidPasswordFails
	| user password  |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [internalInterface purchasedAmountOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidPasswordErrorMessage . ].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:23' prior: 50792924!
test08CantListCartWithInvalidCartID
	|  cartID |
	
	cartID _ testObjectsFactory invalidCartID.

	self
		should: [ internalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. ]! !

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/17/2019 15:02:31'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory aUserList clock internalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:31' prior: 50793432!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.
	aUserList  _ testObjectsFactory defaultUserList .
	clock _ FakeClock new.
	internalInterface _ InternalInterface withUserList: aUserList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock .! !

!classDefinition: #InternalInterfaceTest category: #TusLibros stamp: 'gc 11/17/2019 15:02:37'!
TestCase subclass: #InternalInterfaceTest
	instanceVariableNames: 'testObjectsFactory userList clock internalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:02:37' prior: 50793754!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.
	userList  _ testObjectsFactory defaultUserList .
	clock _ FakeClock new.
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:02:44'!
PASSED!

----SNAPSHOT----(17 November 2019 15:02:48) CuisUniversity-3938.image priorSource: 14771889!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:04:35' prior: 50793303!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:05:13' prior: 50793873!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface expiredCartErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:05:18'!
FAILURE!

Object subclass: #InternalInterface
	instanceVariableNames: 'userList nextCartID catalog salesBook listedPurchases cartsAndOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/17/2019 15:10:30'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList nextCartID catalog salesBook listedPurchases cartsAndOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:10:35'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:10:35'!
FAILURE!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:10:35'!
FAILURE!

Object subclass: #CartInformation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInformation category: #TusLibros stamp: 'gc 11/17/2019 15:11:14'!
Object subclass: #CartInformation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CartInformation
	instanceVariableNames: 'owner cart lastUsedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInformation category: #TusLibros stamp: 'gc 11/17/2019 15:12:24'!
Object subclass: #CartInformation
	instanceVariableNames: 'owner cart lastUsedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInformation class methodsFor: 'no messages' stamp: 'gc 11/17/2019 15:14:57'!
for: aCart from: anOwner with: anInternalInterface
	^self new initializeFor: aCart from: anOwner with: anInternalInterface
	! !
!CartInformation methodsFor: 'no messages' stamp: 'gc 11/17/2019 15:15:56'!
initializeFor: aCart from: anOwner with: anInternalInterface
	cart _ aCart.
	owner _ anOwner .
	! !

Object subclass: #CartInformation
	instanceVariableNames: 'owner cart lastUsedTime internalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInformation category: #TusLibros stamp: 'gc 11/17/2019 15:16:15'!
Object subclass: #CartInformation
	instanceVariableNames: 'owner cart lastUsedTime internalInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:16:43' prior: 50794060!
initializeFor: aCart from: anOwner with: anInternalInterface
	cart _ aCart.
	owner _ anOwner .
	internalInterface _ anInternalInterface .
	lastUsedTime _ internalInterface now.! !
!InternalInterface methodsFor: 'cart creation' stamp: 'gc 11/17/2019 15:19:24' prior: 50789442!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart cartInformation |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	cart _ Cart acceptingItemsOf: catalog.
	
	cartInformation _ CartInformation for: cart from: aUser with: self.
	
	cartsAndOwners at: cartID put: cartInformation .
	^cartID ! !

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/17/2019 15:19:37'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList nextCartID catalog salesBook listedPurchases cartsInformation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50789246!
getCartWith: aCartID 
	^(cartsInformation at: aCartID) at: 'cart'.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50790841!
addToListedPurchases: aCartID
	| cart cartData owner purchases list |
	cartData _ cartsInformation at: aCartID.
	cart _ cartData at: 'cart'.
	owner _ cartData at: 'owner'.
	purchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ purchases at: item ifAbsent: [0]. 
		purchases at: (item) put: (amount + (list at: item)) .
	].

	listedPurchases at: owner put: purchases .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50792039!
initializeWithUserList: aUserList andCatalog: aCatalog withClock: aClock   
	userList _ aUserList.
	cartsInformation _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.
	listedPurchases _ Dictionary new.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50794089!
createCartFor: aUser with: aPassword 
	| recordedPassword cartID cart cartInformation |
	recordedPassword _ userList at: aUser ifAbsent: [^self error: self class invalidUserErrorMessage].
	(recordedPassword = aPassword) ifFalse: [^self error: self class invalidPasswordErrorMessage].
	cartID _ nextCartID .
	nextCartID _ nextCartID + 1.
	cart _ Cart acceptingItemsOf: catalog.
	
	cartInformation _ CartInformation for: cart from: aUser with: self.
	
	cartsInformation at: cartID put: cartInformation .
	^cartID ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50789640!
listCart: aCartID 
	| cartData |
	cartData _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^(cartData at: 'cart' ) list.
	! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50789251!
hasNoCarts
	^cartsInformation isEmpty . ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50789223!
cart: aCartID has: aBookISBN
	^((cartsInformation at: aCartID ) at: 'cart') includes: aBookISBN .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50790129!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartData cart cashier |
	cartData _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cart _ cartData at: 'cart'.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: aCartID.	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50789546!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cartData |
	cartData _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	(cartData at: 'cart') add: anAmount of: aBookISBN .	! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50789273!
ownerOf: aCartID 
	^(cartsInformation at: aCartID) at: 'owner'! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:19:37' prior: 50790029!
hasACartWith: aCartID 
	cartsInformation at: aCartID ifAbsent: [^false].
	^true
! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:22:38' prior: 50794211!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cartInformation |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	cartInformation add: anAmount of: aBookISBN .! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:23:32'!
add: anAmount of: aBookISBN
	cart add: anAmount of: aBookISBN .! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:23:39' prior: 50794245!
add: anAmount of: aBookISBN
	^cart add: anAmount of: aBookISBN .! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:23:54' prior: 50794251!
add: anAmount of: aBookISBN
	cart add: anAmount of: aBookISBN .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:29:20' prior: 50794124!
addToListedPurchases: aCartID
	| cart cartInformation owner purchases list |
	cartInformation _ cartsInformation at: aCartID.
	cart _ cartInformation cart.
	owner _ cartInformation owner.
	purchases _ listedPurchases at: owner ifAbsent: [Dictionary new].
	list _ cart list.
	(list keys) collect: [:item | | amount | 
		amount _ purchases at: item ifAbsent: [0]. 
		purchases at: (item) put: (amount + (list at: item)) .
	].

	listedPurchases at: owner put: purchases .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:29:39' prior: 50794187!
cart: aCartID has: aBookISBN
	^((cartsInformation at: aCartID ) cart) includes: aBookISBN .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:30:14' prior: 50794194!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartInformation cart cashier |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cart _ cartInformation cart.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: aCartID.	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:30:32' prior: 50794281!
cart: aCartID has: aBookISBN
	^(cartsInformation at: aCartID ) includes: aBookISBN! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:30:46'!
includes: aBookISBN
	cart includes: aBookISBN! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:31:06' prior: 50794118!
getCartWith: aCartID 
	^(cartsInformation at: aCartID) cart.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:31:37' prior: 50794173!
listCart: aCartID 
	| cartInformation |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	^cartInformation list.
	! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:31:49'!
list
	^cart list! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:31:56'!
cart
	^cart! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:32:03'!
owner
	^owner! !

----SNAPSHOT----(17 November 2019 15:32:53) CuisUniversity-3938.image priorSource: 14790990!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:32:56'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:32:56'!
ERROR!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:33:00'!
ERROR!

!classDefinition: #InternalInterface category: #TusLibros stamp: 'gc 11/17/2019 15:34:00'!
Object subclass: #InternalInterface
	instanceVariableNames: 'userList nextCartID catalog salesBook listedPurchases cartsInformation clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalInterface methodsFor: 'initialization' stamp: 'gc 11/17/2019 15:33:59' prior: 50794142!
initializeWithUserList: aUserList andCatalog: aCatalog withClock: aClock   
	userList _ aUserList.
	cartsInformation _ Dictionary new.
	nextCartID _ 1.
	catalog _ aCatalog .
	salesBook _ OrderedCollection new.
	listedPurchases _ Dictionary new.
	clock _ aClock! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:34:18'!
now
	^clock now.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:34:21'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:34:21'!
ERROR!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:34:31'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:34:31'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:34:31'!
ERROR!
!FakeClock class methodsFor: 'no messages' stamp: 'gc 11/17/2019 15:36:42'!
withCurrentTime: aTime
	^self new initializeWithCurrentTime: aTime! !

Object subclass: #FakeClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeClock category: #TusLibros stamp: 'gc 11/17/2019 15:36:54'!
Object subclass: #FakeClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FakeClock methodsFor: 'no messages' stamp: 'gc 11/17/2019 15:37:17'!
initializeWithCurrentTime: aTime
	now _ aTime .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:37:23'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:37:23'!
ERROR!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:37:25'!
ERROR!
!FakeClock methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:37:37'!
now
	^now! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:37:40'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:37:40'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:37:40'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:37:40'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:37:40'!
FAILURE!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:37:42'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:38:32' prior: 50793775!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.
	userList  _ testObjectsFactory defaultUserList .
	"clock _ FakeClock withCurrentTime: ."
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock .! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:39:56' prior: 50794821!
setUp
	testObjectsFactory _ StoreTestObjectsFactory new.
	userList  _ testObjectsFactory defaultUserList .
	clock _ FakeClock withCurrentTime: (testObjectsFactory today).
	internalInterface _ InternalInterface withUserList: userList andCatalog: (testObjectsFactory defaultBookCatalog) andClock: clock .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:40:00'!
ERROR!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:40:00'!
ERROR!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:40:00'!
ERROR!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:40:00'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:40:00'!
FAILURE!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:40:02'!
ERROR!
!InternalInterface methodsFor: 'testing' stamp: 'gc 11/17/2019 15:40:19' prior: 50794222!
ownerOf: aCartID 
	^(cartsInformation at: aCartID) owner.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:40:20'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:40:23'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:40:23'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:40:23'!
FAILURE!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:40:24'!
ERROR!
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:41:16' prior: 50794312!
includes: aBookISBN
	^cart includes: aBookISBN! !

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:41:17'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:41:20'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:41:20'!
FAILURE!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:41:20'!
FAILURE!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:43:12' prior: 50793898!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	clock advanceTime: (testObjectsFactory expirationWindow).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface expiredCartErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:45:18' prior: 50795126!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface expiredCartErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:45:57'!
advanceTime: anAmountOfTime
	clock advanceTime: anAmountOfTime .! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:46:47'!
expirationWindow
	^30*minute! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:47:47' prior: 50795153!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface expiredCartErrorMessage. ]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:50:36' prior: 50794288!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartInformation cart cashier |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cartInformation assertIsNotExpired.
	cart _ cartInformation cart.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: salesBook .
	self addToListedPurchases: aCartID.	
	^cashier checkOut ! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:52:43'!
assertIsNotExpired
	((internalInterface now) - lastUsedTime ) >= (internalInterface expirationWindow ) ifTrue: [^self error: self class expiredCartErrorMessage]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:53:02' prior: 50795190!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:53:03'!
ERROR!
!FakeClock methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:53:11'!
advanceTime: aSimpleMeasure 
	self shouldBeImplemented.! !
!FakeClock methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:53:32' prior: 50795274!
advanceTime: anAmountOfTime 
	now _ now + anAmountOfTime! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:54:49' prior: 50795185!
expirationWindow
	^30 minutes! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:54:51'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:54:51'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:54:51'!
ERROR!
!CartInformation class methodsFor: 'error message' stamp: 'gc 11/17/2019 15:55:16'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!CartInformation class methodsFor: 'error message' stamp: 'gc 11/17/2019 15:55:40' prior: 50795376!
expiredCartErrorMessage
	^'Este carrito esta vencido'! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:55:45'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:56:06' prior: 50795244!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:56:07'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:56:07'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:56:07'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:56:07'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:56:07'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:56:07'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:56:08'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:56:08'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:56:58'!
test21purchasedAmountOfClientThatBoughtReturnsTotal
	| user password cart1 cart2 book creditCard total purchasedAmount |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password.
	
	self assert: total equals: purchasedAmount.! !

!methodRemoval: InternalInterfaceTest #test21listPurchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:56:58'!
test21listPurchasedAmountOfClientThatBoughtReturnsTotal
	| user password cart1 cart2 book creditCard total purchasedAmount |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	book _ testObjectsFactory validEditorialISBN .
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	cart1 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart1 book: book quantity: 1.
	total _ internalInterface checkOutCart: cart1 charging: creditCard through: self.
	
	cart2 _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cart2 book: book quantity: 2.
	total _ total + (internalInterface checkOutCart: cart2 charging: creditCard through: self).
	
	purchasedAmount _ internalInterface purchasedAmountOf: user with: password.
	
	self assert: total equals: purchasedAmount.!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:58:08'!
test23AddToCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:58:23' prior: 50795567!
test23AddToCart30MinAfterLastTransactionFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:58:24'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:58:47' prior: 50794234!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cartInformation |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	cartInformation assertIsNotExpired .
	cartInformation add: anAmount of: aBookISBN .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:58:53'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:58:53'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:59:19'!
test23AddToCart30MinAfterLastCreationFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

!methodRemoval: InternalInterfaceTest #test23AddToCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 15:59:19'!
test23AddToCart30MinAfterLastTransactionFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 15:59:39'!
test23AddToCart30MinAfterCreationFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

!methodRemoval: InternalInterfaceTest #test23AddToCart30MinAfterLastCreationFails stamp: 'gc 11/17/2019 15:59:39'!
test23AddToCart30MinAfterLastCreationFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:01:11'!
test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

30 minutes!

(30 minutes)/2!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:03:34' prior: 50795805!
test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:05:15' prior: 50795829!
test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password bookISBN1 bookISBN2 |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN1 _ testObjectsFactory validEditorialISBN .
	bookISBN2 _ testObjectsFactory anotherValidEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface addToCart: cartID book: bookISBN1 quantity: 2.
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface addToCart: cartID book: bookISBN2 quantity: 2.
	
	self assert: (internalInterface cart: cartID has: bookISBN2 ).
	
	
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:05:27'!
anotherValidEditorialISBN
	^ '978-3-16-148410-1'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:05:58' prior: 50782613!
defaultBookCatalog
	
	^ Dictionary new
		at: self validEditorialISBN put: self itemSellByTheStorePrice;
		at: self anotherValidEditorialISBN put: self itemSellByTheStorePrice;
		yourself ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:06:01'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:06:01'!
ERROR!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:06:01'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:06:45' prior: 50795618!
addToCart: aCartID book: aBookISBN quantity: anAmount
	| cartInformation |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage .].
	cartInformation assertIsNotExpired .
	cartInformation add: anAmount of: aBookISBN .! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:07:09' prior: 50794257!
add: anAmount of: aBookISBN
	cart add: anAmount of: aBookISBN .
	lastUsedTime _ internalInterface now.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:07:13'!
PASSED!

----SNAPSHOT----(17 November 2019 16:07:58) CuisUniversity-3938.image priorSource: 14806160!

----SNAPSHOT----(17 November 2019 16:08:10) CuisUniversity-3938.image priorSource: 14862250!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:09:00'!
test25ListCart30MinAfterCreationFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface listCart: cartID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:09:11' prior: 50796103!
test25ListCart30MinAfterCreationFails
	| cartID user password |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface listCart: cartID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:09:12'!
FAILURE!
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:09:40' prior: 50794332!
list
	self assertIsNotExpired .
	^cart list! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:09:43'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:09:43'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:10:50'!
test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password bookISBN1 bookISBN2 |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN1 _ testObjectsFactory validEditorialISBN .
	bookISBN2 _ testObjectsFactory anotherValidEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface addToCart: cartID book: bookISBN1 quantity: 2.
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface addToCart: cartID book: bookISBN2 quantity: 2.
	
	self assert: (internalInterface cart: cartID has: bookISBN2 ).
	
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:11:49' prior: 50796246!
test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password bookISBN1 bookISBN2 expectedListedCart|
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN1 _ testObjectsFactory validEditorialISBN .
	bookISBN2 _ testObjectsFactory anotherValidEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface listCart: cartID.
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface listCart: cartID.
	
	self assert: (internalInterface cart: cartID has: bookISBN2 ).
	
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:12:04' prior: 50796272!
test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password expectedListedCart|
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface listCart: cartID.
	self advanceTime: ((internalInterface expirationWindow)/2).
	internalInterface listCart: cartID.
	
	
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:13:52' prior: 50796297!
test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation
	| cartID user password firstListedCart secondListedCart |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	firstListedCart _ internalInterface listCart: cartID.
	self advanceTime: ((internalInterface expirationWindow)/2).
	secondListedCart _ internalInterface listCart: cartID.
	
	self assert: secondListedCart equals: firstListedCart 
	
	! !

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:13:53'!
ERROR!
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:14:47' prior: 50796147!
list
	self assertIsNotExpired .
	self updateLastUsedTime. 
	^cart list! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:15:09' prior: 50795999!
add: anAmount of: aBookISBN
	cart add: anAmount of: aBookISBN .
	self updateLastUsedTime.! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:15:25'!
updateLastUsedTime
	lastUsedTime _ internalInterface now.! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:15:44' prior: 50794080!
initializeFor: aCart from: anOwner with: anInternalInterface
	cart _ aCart.
	owner _ anOwner .
	internalInterface _ anInternalInterface .
	self updateLastUsedTime .! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:16:00'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:16:00'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:18:05'!
test27CantCheckOutTheSameCartTwice
	| cartID user password firstListedCart secondListedCart |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: ((internalInterface expirationWindow)/2).
	firstListedCart _ internalInterface listCart: cartID.
	self advanceTime: ((internalInterface expirationWindow)/2).
	secondListedCart _ internalInterface listCart: cartID.
	
	self assert: secondListedCart equals: firstListedCart 
	
	! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:19:57' prior: 50796468!
test27CantCheckOutTheSameCartTwice
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface checkOutCart: cartID charging: creditCard through: self .
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface cantCheckOutMoreThanOnceErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:20:39' prior: 50796489!
test27CantCheckOutTheSameCartTwice
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	
	
	internalInterface checkOutCart: cartID charging: creditCard through: self .
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface cantCheckOutMoreThanOnceErrorMessage. ]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:21:25' prior: 50796515!
test27CantCheckOutTheSameCartTwice
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	internalInterface checkOutCart: cartID charging: creditCard through: self .
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface cantCheckOutMoreThanOnceErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:21:25'!
FAILURE!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:24:09' prior: 50795217!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartInformation |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cartInformation checkOutCharging: aCreditCard through: aMerchantProcessor ! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:26:04'!
checkOutCharging: aCreditCard through: aMerchantProcessor 
	| cashier |
	self assertIsNotExpired.
	self assertHasntCheckedOutYet.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: (internalInterface salesBook).
	
	^cashier checkOut ! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:26:19' prior: 50796572!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartInformation |
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	cartInformation checkOutCharging: aCreditCard through: aMerchantProcessor .
	self addToListedPurchases: aCartID.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:26:51' prior: 50796597!
checkOutCart: aCartID charging: aCreditCard through: aMerchantProcessor  
	| cartInformation total|
	cartInformation _ cartsInformation at: aCartID ifAbsent: [^self error: self class invalidCartIDErrorMessage] .
	total _ cartInformation checkOutCharging: aCreditCard through: aMerchantProcessor .
	self addToListedPurchases: aCartID.
	
	^total! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:27:06' prior: 50796584!
checkOutCharging: aCreditCard through: aMerchantProcessor 
	| cashier |
	self assertIsNotExpired.
	self assertHasntCheckedOutYet.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: (internalInterface salesBook).
	^cashier checkOut ! !

!classDefinition: #CartInformation category: #TusLibros stamp: 'gc 11/17/2019 16:29:11'!
Object subclass: #CartInformation
	instanceVariableNames: 'owner cart lastUsedTime internalInterface hasCheckedOut'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:29:06'!
assertHasntCheckedOutYet
	^hasCheckedOut ifTrue: [^self error: self class hasCheckedOutErrorMessage]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:29:22' prior: 50796541!
test27CantCheckOutTheSameCartTwice
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	internalInterface checkOutCart: cartID charging: creditCard through: self .
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface hasCheckedOutErrorMessage. ]! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:29:44' prior: 50796360!
initializeFor: aCart from: anOwner with: anInternalInterface
	cart _ aCart.
	owner _ anOwner .
	internalInterface _ anInternalInterface .
	hasCheckedOut _ false.
	self updateLastUsedTime .! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:30:29' prior: 50796625!
checkOutCharging: aCreditCard through: aMerchantProcessor 
	| cashier total |
	self assertIsNotExpired.
	self assertHasntCheckedOutYet.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: (internalInterface salesBook).
	total _ cashier checkOut.
	hasCheckedOut _ true. ! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:30:37' prior: 50796690!
checkOutCharging: aCreditCard through: aMerchantProcessor 
	| cashier total |
	self assertIsNotExpired.
	self assertHasntCheckedOutYet.
	cashier _ Cashier toCheckout: cart charging: aCreditCard through: aMerchantProcessor on: (DateAndTime now) registeringOn: (internalInterface salesBook).
	total _ cashier checkOut.
	hasCheckedOut _ true.
	^total ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:30:40'!
ERROR!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:30:40'!
ERROR!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:30:40'!
ERROR!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:30:40'!
ERROR!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:30:40'!
ERROR!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:30:40'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:30:40'!
ERROR!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:30:43'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:31:08'!
salesBook
	^salesBook ! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:31:10'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:31:10'!
ERROR!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:31:10'!
ERROR!
!CartInformation class methodsFor: 'error message' stamp: 'gc 11/17/2019 16:31:27'!
hasCheckedOutErrorMessage
	self shouldBeImplemented.! !
!CartInformation class methodsFor: 'error message' stamp: 'gc 11/17/2019 16:31:49' prior: 50796934!
hasCheckedOutErrorMessage
	^'Este carrito ya hizo check out'! !

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:31:50'!
ERROR!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:32:26' prior: 50796653!
test27CantCheckOutTheSameCartTwice
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	internalInterface checkOutCart: cartID charging: creditCard through: self .
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation hasCheckedOutErrorMessage. ]! !

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:32:27'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:32:27'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:33:22' prior: 50793341!
test05CantAddToCartWithInvalidCartID
	|  cartID bookISBN |
	
	cartID _ testObjectsFactory invalidCartID.
	bookISBN _ testObjectsFactory validEditorialISBN.
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 1. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage.
			self assert: internalInterface hasNoCarts .
		]! !

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:33:24'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:33:24'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:34:42' prior: 50793444!
test07CantAddToCartWithInvalidISBN
	|  cartID bookISBN aPassword aUserName |
	
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface getCartWith: cartID) invalidItemErrorMessage .
			self deny: (internalInterface hasACartWith: bookISBN) .
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:36:07' prior: 50797205!
test07CantAddToCartWithInvalidISBN
	|  cartID bookISBN aPassword aUserName |
	
	bookISBN _ testObjectsFactory invalidEditorialISBN .
	
	aUserName _ testObjectsFactory userOfTheStore .
	aPassword _ testObjectsFactory passwordOfUserOfTheStore .
	cartID _ internalInterface createCartFor: aUserName with: aPassword .
	
	self
		should: [internalInterface addToCart: cartID book: bookISBN quantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = (internalInterface getCartWith: cartID) invalidItemErrorMessage .
			self deny: (internalInterface cart: cartID has: bookISBN ).
			]! !

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:36:09'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:36:09'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:36:33' prior: 50793732!
test08CantListCartWithInvalidCartID
	|  cartID |
	
	cartID _ testObjectsFactory invalidCartID.

	self
		should: [ internalInterface listCart: cartID. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. 
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:37:53' prior: 50793396!
test11checkOutCartWithInvalidIDShouldFail
	| cartID creditCard|
	
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. 
			self deny: (internalInterface hasSales)
			]! !

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:37:57'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:38:02'!
hasSales
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:38:19' prior: 50797395!
hasSales
	^salesBook isEmpty not! !

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:38:20'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:38:20'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:38:54' prior: 50793623!
test12checkOutCartWithExpiredCardShouldFail
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . 
			self deny: internalInterface hasSales.
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:39:07' prior: 50793541!
test13checkOutCartWithEmptyCartShouldFail
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . 
			]! !

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:39:08'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:39:08'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:39:46' prior: 50797538!
test13checkOutCartWithEmptyCartShouldFail
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . 
			self deny: internalInterface hasSales 
			]! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:40:28'!
hasRegisteredSales
	^salesBook isEmpty not! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:40:28' prior: 50797665!
test13checkOutCartWithEmptyCartShouldFail
	| cartID creditCard user password|
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	
	cartID _ internalInterface createCartFor: user with: password .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage . 
			self deny: internalInterface hasRegisteredSales 
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:40:28' prior: 50797373!
test11checkOutCartWithInvalidIDShouldFail
	| cartID creditCard|
	
	cartID _ testObjectsFactory invalidCartID.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = InternalInterface invalidCartIDErrorMessage. 
			self deny: (internalInterface hasRegisteredSales)
			]! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:40:28' prior: 50797511!
test12checkOutCartWithExpiredCardShouldFail
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory expiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 1.
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage . 
			self deny: internalInterface hasRegisteredSales.
			]! !

!methodRemoval: InternalInterface #hasSales stamp: 'gc 11/17/2019 16:40:28'!
hasSales
	^salesBook isEmpty not!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:40:36'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:40:36'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:41:03' prior: 50793324!
test16listPurchasesOfInvalidClientFails
	| user password  |
	
	user _ testObjectsFactory invalidUserOfTheStore .
	password _ testObjectsFactory invalidPasswordOfUserOfTheStore .
	
	self
		should: [internalInterface listPurchasesOf: user with: password. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
		self assert: anError messageText = InternalInterface invalidUserErrorMessage .
		].
! !
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:43:07' prior: 50795390!
test22CheckOutCart30MinAfterLastTransactionFails
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. 
			self deny: internalInterface hasRegisteredSales .
			self deny: (internalInterface hasCheckedOut: cartID) .
			]! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:43:10'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:43:15'!
hasCheckedOut: aSmallInteger 
	self shouldBeImplemented.! !
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:44:06' prior: 50797918!
hasCheckedOut: aCartID 
	(cartsInformation at: aCartID) hasCheckedOut.! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:44:08'!
ERROR!
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:44:13'!
hasCheckedOut
	self shouldBeImplemented.
	^hasCheckedOut! !
!CartInformation methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:44:17' prior: 50797933!
hasCheckedOut
	^hasCheckedOut! !

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:44:19'!
ERROR!
!InternalInterface methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:45:19' prior: 50797924!
hasCheckedOut: aCartID 
	^(cartsInformation at: aCartID) hasCheckedOut.! !

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:45:22'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:45:22'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:47:22' prior: 50795761!
test23AddToCart30MinAfterCreationFails
	| cartID user password bookISBN |
	
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	self advanceTime: (internalInterface expirationWindow).
	
	self
		should: [ internalInterface addToCart: cartID book: bookISBN quantity: 2. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation expiredCartErrorMessage. 
			self deny: (internalInterface cart: cartID has: bookISBN )
			]! !

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:47:24'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:47:24'!
PASSED!
!InternalInterfaceTest methodsFor: 'as yet unclassified' stamp: 'gc 11/17/2019 16:49:18' prior: 50796948!
test27CantCheckOutTheSameCartTwice
	| cartID creditCard user password bookISBN |
	
	creditCard _ testObjectsFactory notExpiredCreditCard .
	user _ testObjectsFactory userOfTheStore .
	password _ testObjectsFactory passwordOfUserOfTheStore .
	bookISBN _ testObjectsFactory validEditorialISBN .
	
	cartID _ internalInterface createCartFor: user with: password .
	internalInterface addToCart: cartID book: bookISBN quantity: 2.
	internalInterface checkOutCart: cartID charging: creditCard through: self .
	self
		should: [ internalInterface checkOutCart: cartID charging: creditCard through: self . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = CartInformation hasCheckedOutErrorMessage. 
			self assert: ((internalInterface salesBook size) = 1)
			]! !

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test01CreateCartForAValidUserAndPasswordCreatesACart stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test02CreateCartForAnInvalidUserDoesntCreateACart stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test03CreateCartForValidUserAndInvalidPasswordDoesntCreateACart stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test04DifferentCartsHaveDifferentIDs stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test05CantAddToCartWithInvalidCartID stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test06CanAddToCartWithValidCartIDAndISBN stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test07CantAddToCartWithInvalidISBN stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test08CantListCartWithInvalidCartID stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test09ListEmptyCartWithValidCartIDReturnsEmptyCollection stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test10ListCartWithValidCartIDWorks stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test11checkOutCartWithInvalidIDShouldFail stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test12checkOutCartWithExpiredCardShouldFail stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test13checkOutCartWithEmptyCartShouldFail stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test14checkOutCartCorrectlyChecksOut stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test15listPurchasesOfClientThatDidntBuyReturns0 stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test16listPurchasesOfInvalidClientFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test17purchasedAmountOfInvalidClientFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test18listPurchasesWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test19purchasedAmountWithInvalidPasswordFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test20listPurchasesOfClientThatBoughtReturnsPurchases stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test21purchasedAmountOfClientThatBoughtReturnsTotal stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test22CheckOutCart30MinAfterLastTransactionFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test23AddToCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test24CanAddToCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test25ListCart30MinAfterCreationFails stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test26CanListCart15MinAfterLastTransactionAnd30MinAfterCreation stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

!testRun: #InternalInterfaceTest #test27CantCheckOutTheSameCartTwice stamp: 'gc 11/17/2019 16:49:21'!
PASSED!

----SNAPSHOT----(17 November 2019 16:53:50) CuisUniversity-3938.image priorSource: 14862344!

----SNAPSHOT----(17 November 2019 17:00:43) CuisUniversity-3938.image priorSource: 14933420!

----SNAPSHOT----(17 November 2019 17:01:46) CuisUniversity-3938.image priorSource: 14933514!

----SNAPSHOT----(17 November 2019 17:03:24) CuisUniversity-3938.image priorSource: 14933608!

----QUIT----(17 November 2019 17:03:28) CuisUniversity-3938.image priorSource: 14933702!