

----QUIT----(11 August 2019 20:30:30) CuisUniversity-3839.image priorSource: 9989307!

----STARTUP---- (11 August 2019 20:30:31) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-3839.image!


!classDefinition: #BecomeTestExperiment category: #'BaseImageTests-Kernel'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!classDefinition: #BecomeTestExperiment category: #'BaseImageTests-Kernel'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!
!ArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:30:50'!
array ^ #(nil true false)! !

ArrayLiteralTest removeSelector: #array!
!ArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:30:50'!
array ^ #(#nil #true #false #'nil' #'true' #'false')! !

ArrayLiteralTest removeSelector: #array!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:31'!
m1 | a | a := 10.! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:31'!
m1:a! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:32'!
m1 [ :a | ] value: 1! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:32'!
m1 [ | a | ] value! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:33'!
m1 | a | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34' prior: 50722580!
sender_m1 self m1: 1! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35' prior: 50722606!
sender_m1 self m1: 1 m2: 2! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35' prior: 50722633!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36' prior: 50722661!
sender_m1 self m1: self size m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36' prior: 50722689!
sender_m1 self m1: self size + 4 m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37' prior: 50722717!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38' prior: 50722745!
sender_m1 #m1: size! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38' prior: 50722771!
sender_m1 #m1:m2: size.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:40'!
m1! !

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:41'!
m1:newParam! !

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43' prior: 50722821!
sender_m1 self m1: 1
	! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44' prior: 50722846!
sender_m1 self m1: (self at: 1)! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45' prior: 50722872!
sender_m1 self m1: 1 m2: (self at: 1)! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45' prior: 50722900!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46' prior: 50722928!
sender self m2: 2 m1: 1! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46' prior: 50722954!
sender self m1: 1 m2: 2 m3: 3! !

ClassToAddParameter removeSelector: #m1:m3:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47' prior: 50722981!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

ClassToAddParameter removeSelector: #m1:m3:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48' prior: 50723009!
sender_m1 self m1: 1! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:50'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:50'!
m2: p2 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m2: p2 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m2: p2 m3: p3 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:m3:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToExtractTemp category: #'__Refactoring-TestData__'!
Object subclass: #ClassToExtractTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToExtractTemp!

!classDefinition: #ClassToRefactorSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractTemp category: #'__Refactoring-TestData__'!
ClassToRefactorSuperclass subclass: #ClassToExtractTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToExtractTemp!

Smalltalk removeClassNamed: #ClassToRefactorSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: #'__Refactoring-TestData__'!
Object subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AlreadyExistingClass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:05'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: #'__Refactoring-TestData__'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:06'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithReferenceInstVar!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:07'!
m1 ^a! !

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:09'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:09'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:10'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:10'!
m1: parameter ^parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m2:parameter2! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 
	| t1 |! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:12'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:12'!
m0: parameter0 
	m2:parameter2! !

ClassToRemoveParameter removeSelector: #m0:m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1! !

ClassToRemoveParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13' prior: 50723512!
sender
		self 
			m2: 2 ! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14' prior: 50723540!
sender
		self 
			m1.! !

ClassToRemoveParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14' prior: 50723567!
sender
		self m2: 2.
		self m2: 4.! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #OldClassTest07 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest07!

!classDefinition: #OldClassTest07 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:17'!
m1 OldClassTest07 new! !
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:17' prior: 50723599!
m1 NewClassTest07 new! !

Smalltalk removeClassNamed: #NewClassTest07!

!classDefinition: #OldClassTest08 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18'!
m1 #OldClassTest08 size! !
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18' prior: 50723615!
m1 #NewClassTest8 size! !

Smalltalk removeClassNamed: #NewClassTest8!

!classDefinition: #OldClassTest09 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18'!
m1 OldClassTest09 new. Object new! !
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18' prior: 50723631!
m1 NewClassTest09 new. Object new! !

Smalltalk removeClassNamed: #NewClassTest09!

!classDefinition: #OldClassTest10 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:19'!
m1 #OldClassTest10 size. #Object size! !
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:19' prior: 50723649!
m1 #NewClassTest10 size. #Object size! !

Smalltalk removeClassNamed: #NewClassTest10!

!classDefinition: #OldClassTest11 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:20'!
m1 OldClassTest11 new. #OldClassTest11 size! !
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:20' prior: 50723667!
m1 NewClassTest11 new. #NewClassTest11 size! !

Smalltalk removeClassNamed: #NewClassTest11!

!classDefinition: #OldClassTest14 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #OldClassTest14!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:21'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest15!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:22'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest16!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:23'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest17!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #OldClassTest18 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:24'!
m1 ^OldClassTest18! !
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:25' prior: 50723781!
m1 ^NewClassTest18! !

Smalltalk removeClassNamed: #NewClassTest18!

!classDefinition: #OldClassTest18 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #OldClassTest18!

!classDefinition: #AClassToRefactor category: #'__Refactoring-TestData__'!
Object subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28' prior: 50723809!
m1 ^NewNameToRename__! !

Smalltalk removeClassNamed: #AClassToRefactor!

!classDefinition: #AClassToRefactor category: #'__Refactoring-TestData__'!
Object subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28' prior: 50723825!
m1 ^#NewNameToRename__! !

Smalltalk removeClassNamed: #AClassToRefactor!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:29'!
m1 ^OldNameToRename__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:30'!
m1 ^OldNameRenamed__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:31'!
m1 ^OldNameToRename__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37' prior: 50724007!
m1 ^new! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37' prior: 50724039!
m1 new := 10! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:38'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:38' prior: 50724079!
m1 new := 10. ^new! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:39'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:39' prior: 50724113!
m1 keep := new. ^keep! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'keep new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:40'!
m1 | new | new := 10.! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:40'!
m1:new! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:41'!
m1 [ :new | ] value: 1! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:41'!
m1 [ | new | ] value! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:42'!
m1 | new | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43' prior: 50724265!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44' prior: 50724291!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44' prior: 50724295!
m1__ self newXyz__. self toKeep! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 8/11/2019 20:32:46'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46' prior: 50724322!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47' prior: 50724344!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47' prior: 50724356!
newXyz__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724376!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724384!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724388!
newXyz__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724413!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724425!
m1 #newXyz__ size! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49' prior: 50724451!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49' prior: 50724459!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724511!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724519!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724535!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724543!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724559!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724567!
m1__ self newXyz__! !

SuperclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__-toAvoid'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724688!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724696!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724664!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724672!
m1__ self newXyz__! !

AnotherclassToRenameSelector removeSelector: #oldXyz__!

AnotherclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #AnotherclassToRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__-Another'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: #'__Refactoring-TestData__-Another'!
Object subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__-toAvoid'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724827!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724876!
m1__ self newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724843!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724803!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724771!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724868!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724795!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724851!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724819!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724779!
m1__ self newXyz__! !

AnotheclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

SuperclassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

OtherCatClassToRenameSelector class removeSelector: #oldXyz__!

OtherCatClassToRenameSelector removeSelector: #oldXyz__!

AnotheclassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

Smalltalk removeClassNamed: #AnotheclassToRenameSelector!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

Smalltalk removeClassNamed: #OtherCatClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725020!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725028!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725044!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725052!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

AnotherclassToRenameSelector removeSelector: #oldXyz__!

AnotherclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #AnotherclassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725109!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725121!
m1 ^#(#newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725143!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725155!
m1 ^#(#newXyz__ #newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57' prior: 50725178!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57' prior: 50725190!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725214!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725226!
m1 ^#(#newXyz__ #oldXyz__1)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725249!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725261!
m1 ^#(#newXyz__ #oldXyz__:)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59' prior: 50725288!
m1 ^self abc: 1! !

ClassToRenameSelector removeSelector: #&&!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59' prior: 50725314!
m1 ^self && 1! !

ClassToRenameSelector removeSelector: #abc:!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:00'!
&& aParameter! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:00'!
abc: p1 def: p2! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725366!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725374!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725390!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725398!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725414!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725422!
m1__ self newXyz__! !

SuperclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

!classDefinition: #ClassToRenameTemp category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameTemp!

!classDefinition: #ClassToRefactorSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: #'__Refactoring-TestData__'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameTemp!

Smalltalk removeClassNamed: #ClassToRefactorSuperclass!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:07'!
m1 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemove!

Smalltalk removeClassNamed: #ClassReferencingClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:08'!
m1 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:10'!
m1 ^ClassToRemoveSubclass! !

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

Smalltalk removeClassNamed: #ClassReferencingClassToRemoveSubclass!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:12'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:12'!
m2 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13' prior: 50725671!
m1 ! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13' prior: 50725695!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m1! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m2| a |! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: #'__Refactoring-TestData__'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:15'!
m1| a |! !

Smalltalk removeClassNamed: #SubclassToRefactor!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: #'__Refactoring-TestData__'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m2| a |! !

Smalltalk removeClassNamed: #SubclassToRefactor!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16' prior: 50725795!
m1 ! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:17'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:17' prior: 50725819!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18'!
m1
	[ | a | ].
	[ | a | ].! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18' prior: 50725856!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19' prior: 50725883!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20' prior: 50725946!
m3 | x | x := ClassOfSender new. x m2! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassOfSender!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21' prior: 50725984!
m3 | x | x := self. x := ClassOfSender new. x m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22' prior: 50726027!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23' prior: 50726070!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24' prior: 50726103!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24' prior: 50726137!
m3 | x | x := self. x := ClassOfSender new. x m2! !

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25' prior: 50726175!
m3 self m2. ClassOfSender new m1! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26' prior: 50726202!
m3 |x| self m2. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26' prior: 50726210!
m3 |x| self m2. x m1! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

----QUIT----(11 August 2019 20:33:45) CuisUniversity-3839.image priorSource: 12503879!

----STARTUP---- (23 September 2019 19:47:50) as /home/gzeitoune/Documents/UBA/ingSoft1/examen/imagen nueva/CuisUniversity-3839.image!


----End fileIn of /home/gzeitoune/Documents/UBA/ingSoft1/examen/IngSof1-2019-2C-1Parcial.st----!

----STARTUP---- (23 September 2019 19:50:55) as /home/gzeitoune/Documents/UBA/ingSoft1/examen/imagen nueva/CuisUniversity-3839.image!


----End fileIn of /home/gzeitoune/Documents/UBA/ingSoft1/examen/IngSof1-2019-2C-1Parcial.st----!

----STARTUP---- (1 October 2019 12:37:13) as /home/gzeitoune/Documents/UBA/ingSoft1/examen/imagen nueva/CuisUniversity-3839.image!


----STARTUP---- (3 October 2019 20:17:44) as /home/gzeitoune/Documents/UBA/ingSoft1/ing-soft-1/CuisUniversity-3839.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classDefinition: #MarsRoverTest category: #'Cuis-University-Tests'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRoverTest category: #''!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: #MarsRover!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Smalltalk removeClassNamed: #MarsRoverTest!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Smalltalk removeClassNamed: #NameOfSubclass!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'gc 10/3/2019 20:35:09'!
test01fShouldMoveForward
	self assert: ((MarsRover at: 1@1 lookingAt: 'n') move: 'f' position) equals: 1@2! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:35:55' prior: 50726361!
test01fShouldMoveForward
	self assert: ((MarsRover at: 1@1 lookingAt: 'N') move: 'f' position) equals: 1@2! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:36:24'!
test02fShouldMoveBackward
	self assert: ((MarsRover at: 1@1 lookingAt: 'N') move: 'f' position) equals: 1@2! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:36:29'!
test02bShouldMoveBackward
	self assert: ((MarsRover at: 1@1 lookingAt: 'N') move: 'f' position) equals: 1@2! !

MarsRoverTest removeSelector: #test02fShouldMoveBackward!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:43:34'!
test00NoInstruction
	self assert: ((MarsRover at: 1@1 lookingAt: 'N') move: 'f' position) equals: 1@2! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:43:43'!
test00NoInstructionStaysInPosition
	self assert: ((MarsRover at: 1@1 lookingAt: 'N') move: 'f' position) equals: 1@2! !

MarsRoverTest removeSelector: #test00NoInstruction!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:44:36'!
test00NoInstructionStaysInPositionAndDirection
	self assert: ((MarsRover at: 1@1 lookingAt: 'N')  position) equals: 1@1! !

MarsRoverTest removeSelector: #test00NoInstructionStaysInPosition!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:45:45' prior: 50726402!
test00NoInstructionStaysInPositionAndDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'
	self assert: (rover  position) equals: 1@1
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:47:08' prior: 50726411!
test00NoInstructionStaysInPositionAndDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'N'.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:48:34' prior: 50726368!
test01fShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'f'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:50:03' prior: 50726380!
test02bShouldMoveBackward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'b'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:59:06' prior: 50726419!
test00NoInstructionStaysInPositionAndDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'N'.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 20:59:19' prior: 50726447!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'N'.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRover class methodsFor: 'instance creation' stamp: 'gc 10/3/2019 21:04:02'!
at: aPoint lookingAt: aString 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'gc 10/3/2019 21:05:01' prior: 50726472!
at: aPoint lookingAt: aDirection 
	^self initilializeAt: aPoint  lookingAt: aDirection .! !
!MarsRover class methodsFor: 'initialization' stamp: 'gc 10/3/2019 21:05:43'!
initilializeAt: aPoint lookingAt: aString 
	self shouldBeImplemented.! !

MarsRover class removeSelector: #initilializeAt:lookingAt:!
!MarsRover class methodsFor: 'instance creation' stamp: 'gc 10/3/2019 21:06:14' prior: 50726477!
at: aPoint lookingAt: aDirection 
	^self new initilializeAt: aPoint  lookingAt: aDirection .! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/3/2019 21:06:33'!
initilializeAt: aPoint lookingAt: aString 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/3/2019 21:07:10' prior: 50726497!
initilializeAt: aPoint lookingAt: aDirection 
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:07:34'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:07:51' prior: 50726520!
position
	^position! !
!MarsRover methodsFor: 'observer' stamp: 'gc 10/3/2019 21:09:49'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'observer' stamp: 'gc 10/3/2019 21:10:19' prior: 50726528!
direction
	^direction! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:11:21'!
move: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:12:05' prior: 50726536!
move: aListOfInstructions 
	! !

rover move: 'f'!
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:19:26' prior: 50726540!
move: aListOfInstructions 
	position _ position + 0@1.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:19:52' prior: 50726545!
move: aListOfInstructions 
	position _ 0@1 + position.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:21:34' prior: 50726550!
move: aListOfInstructions 
	aListOfInstructions  = 'f' ifTrue: [position _ 0@1 + position.].
	aListOfInstructions  = 'b' ifTrue: [position _ 0@-1 + position.]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:22:59'!
test03NfsShouldMoveForwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'fff'.
	self assert: (rover  position) equals: 1@4.
	self assert: (rover  direction) equals: 'N'.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:25:01' prior: 50726555!
move: aListOfInstructions 
	aListOfInstructions  = 'f' ifTrue: [ (position _ 0@1 + position) timesRepeat: aListOfInstructions length ].
	aListOfInstructions  = 'b' ifTrue: [position _ 0@-1 + position.]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:29:26' prior: 50726572!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	instructionNumber < aListOfInstructions length whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		aListOfInstructions  = 'b' ifTrue: [position _ 0@-1 + position.].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:29:47' prior: 50726581!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	instructionNumber < aListOfInstructions length whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:30:20' prior: 50726595!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	instructionNumber < aListOfInstructions size whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:30:51' prior: 50726609!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	(instructionNumber < aListOfInstructions size) whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:31:31' prior: 50726623!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	instructionNumber < (aListOfInstructions size) whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:31:45' prior: 50726637!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	(instructionNumber < (aListOfInstructions size)) whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:32:37' prior: 50726651!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	(instructionNumber < aListOfInstructions size) whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:34:16' prior: 50726666!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	(true) whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:34:40' prior: 50726680!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	(false) whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:36:15' prior: 50726693!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 0.
	[instructionNumber < aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:36:44' prior: 50726706!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = 'f' ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = 'b' ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !

'f' size!

'f' at: 1!
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:38:59' prior: 50726720!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:40:50'!
test03NbsShouldMoveBackwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'bbb'.
	self assert: (rover  position) equals: 1@-2.
	self assert: (rover  direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:41:01'!
test04NbsShouldMoveBackwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'bbb'.
	self assert: (rover  position) equals: 1@-2.
	self assert: (rover  direction) equals: 'N'.! !

MarsRoverTest removeSelector: #test03NbsShouldMoveBackwardNTimes!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:42:23'!
test05fbEndsInStartingPoint
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'fb'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'N'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:43:19'!
test06rShouldRotateRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'r'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'E'.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:44:27' prior: 50726735!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ direction _ 'E'].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:44:57'!
test06rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'S'.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:46:27' prior: 50726787!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ 
			direction = 'N' ifTrue: [direction _ 'E'].
			direction = 'E' ifTrue: [direction _ 'S'].
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:48:00' prior: 50726813!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ 
			direction = 'N' ifTrue: [direction _ 'E'] ifFalse: [direction = 'E' ifTrue: [direction _ 'S'].]
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:48:30'!
test06rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'S'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:48:57' prior: 50726852!
test06rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'rrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'W'.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:53:50' prior: 50726832!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ 
			direction = 'N' ifTrue: [
				direction _ 'E'
			] ifFalse: [
				direction = 'E' ifTrue: [
					direction _ 'S'
				] ifFalse: [
					direction = 'S' ifTrue: [
						direction _ 'W'.
					] 
				].
			]
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/3/2019 21:54:43'!
test06rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: 'N'.
	rover move: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'N'.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/3/2019 21:59:15' prior: 50726871!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ 
			direction = 'N' ifTrue: [
				direction _ 'E'
			] ifFalse: [
				direction = 'E' ifTrue: [
					direction _ 'S'
				] ifFalse: [
					direction = 'S' ifTrue: [
						direction _ 'W'.
					] ifFalse:[
						direction = 'W' ifTrue: [
							direction _ 'N'
						]
					]
				].
			]
		].
		instructionNumber _ instructionNumber + 1
	]! !

----SNAPSHOT----(3 October 2019 21:59:21) CuisUniversity-3839.image priorSource: 12628964!

----QUIT----(3 October 2019 21:59:24) CuisUniversity-3839.image priorSource: 12648880!

----STARTUP---- (6 October 2019 18:01:24) as /home/gzeitoune/Documents/UBA/ingSoft1/ing-soft-1/CuisUniversity-3839.image!

!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:01:44' prior: 50726460!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'N'.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:01:51' prior: 50726939!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:02:08' prior: 50726429!
test01fShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'f'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:02:19' prior: 50726438!
test02bShouldMoveBackward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'b'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:02:31' prior: 50726563!
test03NfsShouldMoveForwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'fff'.
	self assert: (rover  position) equals: 1@4.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:02:41' prior: 50726758!
test04NbsShouldMoveBackwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'bbb'.
	self assert: (rover  position) equals: 1@-2.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:02:51' prior: 50726769!
test05fbEndsInStartingPoint
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'fb'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:02:58' prior: 50726778!
test06rShouldRotateRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'r'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: 'E'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:03:04' prior: 50727015!
test06rShouldRotateRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'r'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:03:17' prior: 50726804!
test06rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:03:29' prior: 50726862!
test06rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:03:43' prior: 50726894!
test06rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:04:37' prior: 50726903!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ 
			direction = #North ifTrue: [
				direction _ #East
			] ifFalse: [
				direction = #East ifTrue: [
					direction _ #South
				] ifFalse: [
					direction = #South ifTrue: [
						direction _ #West.
					] ifFalse:[
						direction = #West ifTrue: [
							direction _ #North
						]
					]
				].
			]
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:05:02'!
test07rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #South.! !

MarsRoverTest removeSelector: #test06rrShouldRotateRightTwice!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:05:29'!
test08rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #West.! !

MarsRoverTest removeSelector: #test06rrrShouldRotateRightThreeTimes!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:05:39'!
test10rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !

MarsRoverTest removeSelector: #test06rrrrEndsInStartingDirection!
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:07:24'!
rotateRight 
	direction = #North ifTrue: [
		direction _ #East
	] ifFalse: [
		direction = #East ifTrue: [
			direction _ #South
		] ifFalse: [
			direction = #South ifTrue: [
				direction _ #West.
			] ifFalse:[
				direction = #West ifTrue: [
					direction _ #North
				]
			]
		].
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:07:50' prior: 50727064!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:09:15' prior: 50727124!
rotateRight 
	direction = #North ifTrue: [
		^direction _ #East
	].
	direction = #East ifTrue: [
		^direction _ #South
	].
	direction = #South ifTrue: [
		^direction _ #West.
	].
	direction = #West ifTrue: [
		^direction _ #North
	]
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:13:40'!
test06lShouldRotateLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'l'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:13:56'!
test10lShouldRotateLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'l'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #West.! !

MarsRoverTest removeSelector: #test06lShouldRotateLeft!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:14:07'!
test09rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !

MarsRoverTest removeSelector: #test10rrrrEndsInStartingDirection!
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:15:06' prior: 50727136!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ position _ 0@1 + position].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:15:31'!
rotateLeft
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:16:19' prior: 50727214!
rotateLeft
	[direction = #North] ifTrue: [^direction _ #West].  ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:17:34' prior: 50727218!
rotateLeft
	direction = #North ifTrue: [^direction _ #West].  ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:18:11'!
test11llShouldRotateLeftTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #South.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:19:51' prior: 50727223!
rotateLeft
	direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:20:22'!
test12lllShouldRotateLeftThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'lll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:20:39'!
test13llllEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'llll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:23:45'!
test14InvalidDirectionShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #Invalid.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:28:27' prior: 50727265!
test14InvalidDirectionShouldThrowError
	|rover|
	self should: [rover _  MarsRover at: 1@1 lookingAt: #Invalid.] 
	raise: Error 
	withMessageText: 'El rover debe empezar en una direccion valida'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:28:35' prior: 50727275!
test14InvalidDirectionShouldThrowError
	||
	self should: [ MarsRover at: 1@1 lookingAt: #Invalid.] 
	raise: Error 
	withMessageText: 'El rover debe empezar en una direccion valida'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:28:40' prior: 50727285!
test14InvalidDirectionShouldThrowError
	self should: [ MarsRover at: 1@1 lookingAt: #Invalid.] 
	raise: Error 
	withMessageText: 'El rover debe empezar en una direccion valida'! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:31:56' prior: 50726514!
initilializeAt: aPoint lookingAt: aDirection 
	(#(#North #East #West #South) includes: direction) ifFalse: [self error: 'aa'].
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:32:16' prior: 50727303!
initilializeAt: aPoint lookingAt: aDirection 
	(#(#North #East #West #South) includes: direction) ifFalse: [self error: 'El rover debe empezar en una direccion valida'].
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:32:21' prior: 50727312!
initilializeAt: aPoint lookingAt: aDirection 
	(#(#North #East #West #South) includes: direction) 
	ifFalse: [self error: 'El rover debe empezar en una direccion valida'].
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:35:59' prior: 50727322!
initilializeAt: aPoint lookingAt: aDirection 
	|validDirctions|
	validDirctions _ Set withAll: #(#North #East #West #South).
	(validDirctions includes: direction) 
	ifFalse: [self error: 'El rover debe empezar en una direccion valida'].
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:37:23' prior: 50727332!
initilializeAt: aPoint lookingAt: aDirection 
	|validDirections|
	validDirections _ Set withAll: #(#North #East #West #South).
	(validDirections includes: direction) 
	ifFalse: [self error: 'El rover debe empezar en una direccion valida'].
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:37:28' prior: 50727344!
initilializeAt: aPoint lookingAt: aDirection 
	|validDirections|
	validDirections _ Set withAll: #(#North #East #West #South).
	(validDirections includes: aDirection) 
	ifFalse: [self error: 'El rover debe empezar en una direccion valida'].
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/6/2019 18:37:52' prior: 50727356!
initilializeAt: aPoint lookingAt: aDirection 
	|validDirections|
	validDirections _ Set withAll: #(#North #East #West #South).
	(validDirections includes: aDirection) 
	ifFalse: [^self error: 'El rover debe empezar en una direccion valida'].
	position := aPoint.
	direction := aDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:40:05'!
test15fLookingEastShouldMoveRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover move: 'f'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:40:24' prior: 50727380!
test15fLookingEastShouldMoveRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover move: 'f'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:42:05' prior: 50727195!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ 
			direction = #North ifTrue: [position _ 0@1 + position].
			direction = #East ifTrue: [position _ 1@0 + position ].
		].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:42:39'!
test15fLookingWestShouldMoveLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover move: 'f'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:42:57'!
test16fLookingWestShouldMoveLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover move: 'f'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #West.! !

MarsRoverTest removeSelector: #test15fLookingWestShouldMoveLeft!
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:43:53' prior: 50727399!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ 
			direction = #North ifTrue: [position _ 0@1 + position].
			direction = #East ifTrue: [position _ 1@0 + position ].
			direction = #West ifTrue: [position _ -1@0 + position ].
			direction = #South ifTrue: [position _ 0@-1 + position ].
		].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ position _ 0@-1 + position].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:44:36'!
test16fLookingSouthShouldMoveBackwards
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover move: 'f'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:44:47'!
test17fLookingSouthShouldMoveBackwards
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover move: 'f'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #South.! !

MarsRoverTest removeSelector: #test16fLookingSouthShouldMoveBackwards!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:46:08'!
test15bLookingEastShouldMoveLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover move: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:46:17'!
test18bLookingEastShouldMoveLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover move: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #East.! !

MarsRoverTest removeSelector: #test15bLookingEastShouldMoveLeft!
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:47:24' prior: 50727442!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ 
			direction = #North ifTrue: [position _ 0@1 + position].
			direction = #East ifTrue: [position _ 1@0 + position ].
			direction = #West ifTrue: [position _ -1@0 + position ].
			direction = #South ifTrue: [position _ 0@-1 + position ].
		].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ 
			direction = #North ifTrue: [position _ 0@-1 + position].
			direction = #East ifTrue: [position _ -1@0 + position ].
			direction = #West ifTrue: [position _ 1@0 + position ].
			direction = #South ifTrue: [position _ 0@1 + position ].
		].
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:48:10'!
test19bLookingWestShouldMoveRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover move: 'b'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 18:48:41'!
test20bLookingSouthShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover move: 'b'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #South.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:49:55' prior: 50727510!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ 
			direction = #North ifTrue: [position _ 0@1 + position].
			direction = #East ifTrue: [position _ 1@0 + position ].
			direction = #West ifTrue: [position _ -1@0 + position ].
			direction = #South ifTrue: [position _ 0@-1 + position ].
		].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ 
			direction = #North ifTrue: [position _ 0@-1 + position].
			direction = #East ifTrue: [position _ -1@0 + position ].
			direction = #West ifTrue: [position _ 1@0 + position ].
			direction = #South ifTrue: [position _ 0@1 + position ].
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:52:09' prior: 50727561!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ 
			self moveInDirection: (aListOfInstructions at: instructionNumber) 
		].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ 
			direction = #North ifTrue: [position _ 0@-1 + position].
			direction = #East ifTrue: [position _ -1@0 + position ].
			direction = #West ifTrue: [position _ 1@0 + position ].
			direction = #South ifTrue: [position _ 0@1 + position ].
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:53:05'!
moveInDirection: aDirection
	aDirection = $f ifTrue: [
		direction = #North ifTrue: [position _ 0@1 + position].
		direction = #East ifTrue: [position _ 1@0 + position ].
		direction = #West ifTrue: [position _ -1@0 + position ].
		direction = #South ifTrue: [position _ 0@-1 + position ].
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:53:48' prior: 50727594!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		((aListOfInstructions at: instructionNumber ) = $f or: (aListOfInstructions at: instructionNumber ) = $b) ifTrue: [ 
			self moveInDirection: (aListOfInstructions at: instructionNumber) 
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 18:54:20' prior: 50727621!
moveInDirection: aDirection
	aDirection = $f ifTrue: [
		direction = #North ifTrue: [position _ 0@1 + position].
		direction = #East ifTrue: [position _ 1@0 + position ].
		direction = #West ifTrue: [position _ -1@0 + position ].
		direction = #South ifTrue: [position _ 0@-1 + position ].
	].
	
	aDirection = $b ifTrue: [
		direction = #North ifTrue: [position _ 0@-1 + position].
		direction = #East ifTrue: [position _ -1@0 + position ].
		direction = #West ifTrue: [position _ 1@0 + position ].
		direction = #South ifTrue: [position _ 0@1 + position ].	
	] 
	! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:05:14' prior: 50727653!
moveInDirection: aDirection
	| moveDirection |
	aDirection = $f ifTrue: [
		moveDirection _ 1
	].
	aDirection = $b ifTrue: [
		moveDirection _ -1	
	] .

	direction = #North ifTrue: [position _ 0@moveDirection + position].
	direction = #East ifTrue: [position _ moveDirection@0 + position ].
	direction = #West ifTrue: [position _ (-1*moveDirection)@0 + position ].
	direction = #South ifTrue: [position _ 0@(-1*moveDirection) + position ].! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:05:51' prior: 50727674!
moveInDirection: aMoveDirection
	direction = #North ifTrue: [position _ 0@aMoveDirection + position].
	direction = #East ifTrue: [position _ aMoveDirection@0 + position ].
	direction = #West ifTrue: [position _ (-1*aMoveDirection)@0 + position ].
	direction = #South ifTrue: [position _ 0@(-1*aMoveDirection) + position ].! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:06:41' prior: 50727633!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [
			self moveInDirection: 1
		].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ 
			self moveInDirection: -1
		].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:06:58' prior: 50727704!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveInDirection: 1 ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveInDirection: -1 ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:07:32' prior: 50727724!
move: aListOfInstructions 
	| instructionNumber |
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:07:51'!
moveLeft
	self moveInDirection: 1! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:07:57'!
moveRight
	self moveInDirection: -1! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:08:35' prior: 50727153!
rotateRight 
	direction = #North ifTrue: [ ^direction _ #East ].
	direction = #East ifTrue: [ ^direction _ #South ].
	direction = #South ifTrue: [ ^direction _ #West ].
	direction = #West ifTrue: [ ^direction _ #North ]
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:10:38'!
test21InvalidMoveShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self should: [ rover move: 'a'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:14:10' prior: 50727743!
move: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| c isValidMove not ]) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'nil' stamp: 'gc 10/6/2019 19:15:29'!
isValidMove: aMove
	^True! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:15:49' prior: 50727788!
move: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| self isValidMove: c not ]) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:17:04' prior: 50727810!
isValidMove: aMove
	|validMoves|
	validMoves _ Set withAll: #($f $b $r $l).
	^(validMoves includes: aMove ) ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:18:00' prior: 50727814!
move: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| (self isValidMove: c) not ]) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:19:55' prior: 50727837!
isValidMove: aMove
	|validMoves|
	^true.
	"validMoves _ Set withAll: #($f $b $r $l).
	^(validMoves includes: aMove ) "! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:20:09' prior: 50727866!
isValidMove: aMove
	|validMoves|
	^True.
	"validMoves _ Set withAll: #($f $b $r $l).
	^(validMoves includes: aMove ) "! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:21:02' prior: 50727873!
isValidMove: aMove
	|validMoves|
	^False.
	"validMoves _ Set withAll: #($f $b $r $l).
	^(validMoves includes: aMove ) "! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:21:10' prior: 50727843!
move: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| (self isValidMove: c) ]) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:22:09' prior: 50727880!
isValidMove: aMove
	|validMoves|
	validMoves _ Set withAll: #($f $b $r $l).
	^(validMoves includes: aMove )! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:24:40' prior: 50727887!
move: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| (self isValidMove: c) ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:25:07' prior: 50727916!
move: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| (self isValidMove: c) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !

----SNAPSHOT----(6 October 2019 19:26:51) CuisUniversity-3839.image priorSource: 12648972!
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:27:38'!
do: aListOfInstructions 
	| instructionNumber |
	(aListOfInstructions detect: [:c| (self isValidMove: c) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !

MarsRover removeSelector: #move:!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:27:52' prior: 50726965!
test01fShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:27:57' prior: 50726975!
test02bShouldMoveBackward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:01' prior: 50726985!
test03NfsShouldMoveForwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'fff'.
	self assert: (rover  position) equals: 1@4.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:05' prior: 50726995!
test04NbsShouldMoveBackwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'bbb'.
	self assert: (rover  position) equals: 1@-2.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:09' prior: 50727005!
test05fbEndsInStartingPoint
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'fb'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:14' prior: 50727025!
test06rShouldRotateRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'r'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:19' prior: 50727090!
test07rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:24' prior: 50727101!
test08rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'rrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:31' prior: 50727183!
test09rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:36' prior: 50727172!
test10lShouldRotateLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'l'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:41' prior: 50727228!
test11llShouldRotateLeftTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:46' prior: 50727247!
test12lllShouldRotateLeftThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'lll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:50' prior: 50727256!
test13llllEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'llll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:28:58' prior: 50727390!
test15fLookingEastShouldMoveRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover do: 'f'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:29:03' prior: 50727431!
test16fLookingWestShouldMoveLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover do: 'f'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:29:09' prior: 50727478!
test17fLookingSouthShouldMoveBackwards
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:29:13' prior: 50727499!
test18bLookingEastShouldMoveLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover do: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:29:17' prior: 50727543!
test19bLookingWestShouldMoveRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover do: 'b'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:29:24' prior: 50727552!
test20bLookingSouthShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:29:37' prior: 50727779!
test21InvalidMoveShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self should: [ rover do: 'a'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:29:58'!
move: aListOfInstructions 
	| instructionNumber | 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/6/2019 19:30:19' prior: 50727964!
do: aListOfInstructions 
	(aListOfInstructions detect: [:c| (self isValidMove: c) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	self move: aListOfInstructions ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:30:57'!
test22ValidMovesWithInvalidMoveShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self should: [ rover do: 'a'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:31:07' prior: 50728213!
test22ValidMovesWithInvalidMoveShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self should: [ rover do: 'ffbarf'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:31:36' prior: 50728223!
test22ValidMovesWithInvalidMoveShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self should: [ rover do: 'ffbarf'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:31:47'!
test22ValidMovesWithInvalidMoveShouldThrowErrorAndStayInSamePosition
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	self should: [ rover do: 'ffbarf'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #North.! !

MarsRoverTest removeSelector: #test22ValidMovesWithInvalidMoveShouldThrowError!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/6/2019 19:34:09'!
test23frfShouldMoveDiagonally
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #North.
	rover do: 'frf'.
	self assert: (rover  position) equals: 2@2.
	self assert: (rover  direction) equals: #East.! !

----SNAPSHOT----(6 October 2019 19:34:25) CuisUniversity-3839.image priorSource: 12681945!

----QUIT----(6 October 2019 19:36:20) CuisUniversity-3839.image priorSource: 12691782!

----STARTUP---- (9 October 2019 14:31:40) as /home/chiara/Documents/UBA/ing-soft-1/CuisUniversity-3839.image!

!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 14:52:20'!
test15fLookingEastShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover do: 'f'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #East.! !

MarsRoverTest removeSelector: #test15fLookingEastShouldMoveRight!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 14:52:37'!
test16fLookingWestShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover do: 'f'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #West.! !

MarsRoverTest removeSelector: #test16fLookingWestShouldMoveLeft!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 14:53:33'!
test17fLookingSouthShouldMoveSouth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #South.! !

MarsRoverTest removeSelector: #test17fLookingSouthShouldMoveBackwards!
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 15:42:38'!
test18bLookingEastShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover do: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 15:42:49'!
test19bLookingWestShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover do: 'b'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 15:43:01'!
test20bLookingSouthShouldMoveSouth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #South.! !

MarsRoverTest removeSelector: #test18bLookingEastShouldMoveLeft!

MarsRoverTest removeSelector: #test19bLookingWestShouldMoveRight!

MarsRoverTest removeSelector: #test20bLookingSouthShouldMoveForward!
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 15:43:48'!
test18bLookingEastShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #East.
	rover do: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: #East.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 15:43:56'!
test19bLookingWestShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #West.
	rover do: 'b'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: #West.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 15:44:03'!
test20bLookingSouthShouldMoveNorth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: #South.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: #South.! !

MarsRoverTest removeSelector: #test18bLookingEastShouldMoveEast!

MarsRoverTest removeSelector: #test19bLookingWestShouldMoveWest!

MarsRoverTest removeSelector: #test20bLookingSouthShouldMoveSouth!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 15:55:51' prior: 50727761!
moveLeft
	self moveInDirection: 1
! !

Object subclass: #Cardinals
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Cardinals category: #MarsRover!
Object subclass: #Cardinals
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Cardinals subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: #MarsRover!
Cardinals subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Cardinals subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: #MarsRover!
Cardinals subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Cardinals subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: #MarsRover!
Cardinals subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Cardinals subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: #MarsRover!
Cardinals subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Cardinals methodsFor: 'nil' stamp: 'gc 10/9/2019 16:14:26'!
isValidDirection! !

Cardinals removeSelector: #isValidDirection!
!Cardinals class methodsFor: 'nil' stamp: 'gc 10/9/2019 16:16:16'!
IsValidDirection! !
!Cardinals class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 16:16:29'!
IsValidDirection: aDirection
	! !

Cardinals class removeSelector: #IsValidDirection!
!Cardinals class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 16:24:58' prior: 50728439!
IsValidDirection: aDirection
	^self subclasses detect: [:s| s isEqualTo: aDirection] ifNone: [self Error].! !
!Cardinals class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 16:25:45' prior: 50728445!
IsValidDirection: aDirection
	^self subclasses detect: [:s| s isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!East class methodsFor: 'nil' stamp: 'gc 10/9/2019 16:26:10'!
isEqualTo: aCardinal! !
!East class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:12:43' prior: 50728459!
isEqualTo: aCardinal
	^aCardinal = #East! !
!North class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:12:56'!
isEqualTo: aCardinal
	^aCardinal = #North! !
!South class methodsFor: 'no messages' stamp: 'gc 10/9/2019 17:13:08'!
isEqualTo: aCardinal
	^aCardinal = #South! !
!West class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:13:22'!
isEqualTo: aCardinal
	^aCardinal = #West! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 17:15:54' prior: 50727368!
initilializeAt: aPoint lookingAt: aDirection 
	"|validDirections|
	validDirections _ Set withAll: #(#North #East #West #South).
	(validDirections includes: aDirection) 
	ifFalse: [^self error: 'El rover debe empezar en una direccion valida']."
	Cardinals isValidDirection: aDirection.
	position := aPoint.
	direction := aDirection.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: 'cardinals'
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRover
	instanceVariableNames: 'position direction cardinals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction cardinals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 17:17:46' prior: 50728480!
initilializeAt: aPoint lookingAt: aDirection 
	"|validDirections|
	validDirections _ Set withAll: #(#North #East #West #South).
	(validDirections includes: aDirection) 
	ifFalse: [^self error: 'El rover debe empezar en una direccion valida']."
	cardinals := Cardinals new.
	position := aPoint.
	direction := aDirection.! !
!Cardinals methodsFor: 'nil' stamp: 'gc 10/9/2019 17:18:06'!
IsValidDirection: aDirection
	^self subclasses detect: [:s| s isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 17:18:52' prior: 50728510!
initilializeAt: aPoint lookingAt: aDirection 
	"|validDirections|
	validDirections _ Set withAll: #(#North #East #West #South).
	(validDirections includes: aDirection) 
	ifFalse: [^self error: 'El rover debe empezar en una direccion valida']."
	cardinals := Cardinals new.
	cardinals IsValidDirection: aDirection.
	position := aPoint.
	direction := aDirection.! !
!Cardinals methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:27:08' prior: 50728522!
IsValidDirection: aDirection
	^self allSubclasses detect: [:s| s isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!Cardinals methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:29:21' prior: 50728545!
IsValidDirection: aDirection
	^self allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!Cardinals methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:31:12' prior: 50728553!
IsValidDirection: aDirection
	^Cardinals allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 17:32:31' prior: 50728530!
initilializeAt: aPoint lookingAt: aDirection 
	cardinals := Cardinals new.
	cardinals IsValidDirection: aDirection.
	position := aPoint.
	direction := aDirection.! !
!Directions methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:35:36' prior: 50728562!
IsValidDirection: aDirection
	^Directions allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:35:36' prior: 50728571!
initilializeAt: aPoint lookingAt: aDirection 
	cardinals := Directions new.
	cardinals IsValidDirection: aDirection.
	position := aPoint.
	direction := aDirection.! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:35:59' prior: 50728580!
IsValidDirection: aDirection
	^Direction allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:35:59' prior: 50728589!
initilializeAt: aPoint lookingAt: aDirection 
	cardinals := Direction new.
	cardinals IsValidDirection: aDirection.
	position := aPoint.
	direction := aDirection.! !

Object subclass: #Movement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Movement category: #MarsRover!
Object subclass: #Movement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Movement subclass: #r
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Movement subclass: #R
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #R category: #MarsRover!
Movement subclass: #R
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Movement subclass: #L
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #L category: #MarsRover!
Movement subclass: #L
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Movement subclass: #F
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #F category: #MarsRover!
Movement subclass: #F
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Movement subclass: #B
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #B category: #MarsRover!
Movement subclass: #B
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRover
	instanceVariableNames: 'position direction directions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction directions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 17:37:46' prior: 50728607!
initilializeAt: aPoint lookingAt: aDirection 
	directions := Direction new.
	directions IsValidDirection: aDirection.
	position := aPoint.
	direction := aDirection.! !
!Movement class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:39:06'!
IsValidMove: aMove
	^Movement allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!B class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:40:00'!
isEqualTo: aMove
	^aMove = $b! !
!F class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:40:42'!
isEqualTo: aMove
	^aMove = $f! !
!L class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:40:54'!
isEqualTo: aMove
	^aMove = $l! !
!R class methodsFor: 'nil' stamp: 'gc 10/9/2019 17:41:02'!
isEqualTo: aMove
	^aMove = $r! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 17:42:21' prior: 50728204!
do: aListOfInstructions 
	(aListOfInstructions detect: [:c| (Movement isValidMove: c) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 17:42:51' prior: 50728704!
do: aListOfInstructions 
	(aListOfInstructions detect: [:anInstruction| (Movement isValidMove: anInstruction) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	self move: aListOfInstructions ! !
!Move class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:43:57' prior: 50728683!
IsValidMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:43:57' prior: 50728713!
do: aListOfInstructions 
	(aListOfInstructions detect: [:anInstruction| (Move isValidMove: anInstruction) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. 
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 17:46:28' prior: 50728732!
do: aListOfInstructions 
	"(aListOfInstructions detect: [:anInstruction| (Move isValidMove: anInstruction) not ] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos']. "
	aListOfInstructions do: [ :anInstruction | Move IsValidMove: anInstruction ].
	self move: aListOfInstructions ! !
!Move class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:46:56' prior: 50728723!
IsValidMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'Movimientos invalidos'].! !
!Move class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:47:12' prior: 50728755!
IsValidMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'Movimientos Invalidos'].! !

MarsRover removeSelector: #isValidMove:!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 17:50:20' prior: 50728742!
do: aListOfInstructions 
	aListOfInstructions do: [ :anInstruction | Move IsValidMove: anInstruction ].
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 17:56:14' prior: 50727237!
rotateLeft
	^direction _ (directions rotateLeftFrom: direction).
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !

Direction class removeSelector: #IsValidDirection:!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 17:57:47' prior: 50728779!
rotateLeft
	"^direction _ (directions rotateLeftFrom: direction).
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North].! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:58:21'!
rotateLeftFrom: aDirection
! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 17:58:24' prior: 50728803!
rotateLeftFrom: aDirection
	! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 18:00:05' prior: 50728807!
rotateLeftFrom: aDirection
	^(Direction allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aDirection]) left! !
!East methodsFor: 'no messages' stamp: 'gc 10/9/2019 18:00:22'!
left
	! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 18:01:39' prior: 50728817!
left
	^#North
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!Direction class methodsFor: 'nil' stamp: 'gc 10/9/2019 18:05:14'!
new: aDirection
	^ self subclasses detect: [ :aSubclass | aSubclass  isEqualTo: aDirection ] new! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 18:05:58' prior: 50728821!
left
	^North
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !

Direction class removeSelector: #new:!
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 18:07:31' prior: 50728836!
left
	^#North
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!North methodsFor: 'nil' stamp: 'gc 10/9/2019 18:07:56'!
left
	^#West
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!South methodsFor: 'no messages' stamp: 'gc 10/9/2019 18:08:09'!
left
	^#East
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!West methodsFor: 'nil' stamp: 'gc 10/9/2019 18:08:36'!
left
	^#South
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 18:09:56' prior: 50728598!
IsValidDirection: aDirection
	^Direction allSubclasses detect: [:aSubclass| aSubclass = aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 18:11:31' prior: 50728792!
rotateLeft
	^direction _ direction left.
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!MarsRoverTest methodsFor: 'Idle' stamp: 'gc 10/9/2019 18:11:46' prior: 50726952!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: North.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: North.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'Basic Forward' stamp: 'gc 10/9/2019 18:11:59' prior: 50727988!
test01fShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Backward' stamp: 'gc 10/9/2019 18:12:09' prior: 50727998!
test02bShouldMoveBackward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: #North.! !
!MarsRoverTest methodsFor: 'Basic Backward' stamp: 'gc 10/9/2019 18:12:11' prior: 50728925!
test02bShouldMoveBackward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Idle' stamp: 'gc 10/9/2019 18:14:05' prior: 50728028!
test05fbEndsInStartingPoint
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'fb'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Backward' stamp: 'gc 10/9/2019 18:14:16' prior: 50728018!
test04NbsShouldMoveBackwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'bbb'.
	self assert: (rover  position) equals: 1@-2.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Forward' stamp: 'gc 10/9/2019 18:14:26' prior: 50728008!
test03NfsShouldMoveForwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'fff'.
	self assert: (rover  position) equals: 1@4.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 18:14:36' prior: 50728038!
test06rShouldRotateRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'r'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: East.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 18:14:40' prior: 50728048!
test07rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: #South.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 18:14:42' prior: 50728981!
test07rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: South.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 18:14:48' prior: 50728058!
test08rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: West.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 18:14:56' prior: 50728068!
test09rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 18:15:06' prior: 50728078!
test10lShouldRotateLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'l'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: West.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 18:15:14' prior: 50728087!
test11llShouldRotateLeftTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: South.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 18:15:21' prior: 50728097!
test12lllShouldRotateLeftThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'lll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: East.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 18:15:26' prior: 50728107!
test13llllEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'llll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: North.! !
!MarsRoverTest methodsFor: 'Forward with directions' stamp: 'gc 10/9/2019 18:15:34' prior: 50728278!
test15fLookingEastShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: East.
	rover do: 'f'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: East.! !
!MarsRoverTest methodsFor: 'Forward with directions' stamp: 'gc 10/9/2019 18:15:41' prior: 50728289!
test16fLookingWestShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: West.
	rover do: 'f'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: West.! !
!MarsRoverTest methodsFor: 'Forward with directions' stamp: 'gc 10/9/2019 18:15:48' prior: 50728300!
test17fLookingSouthShouldMoveSouth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: South.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction) equals: South.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 18:15:59' prior: 50728346!
test18bLookingEastShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: East.
	rover do: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction) equals: East.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 18:16:14' prior: 50728355!
test19bLookingWestShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: West.
	rover do: 'b'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction) equals: West.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 18:16:22' prior: 50728364!
test20bLookingSouthShouldMoveNorth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: South.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction) equals: South.! !
!MarsRoverTest methodsFor: 'Diagonal' stamp: 'gc 10/9/2019 18:16:31' prior: 50728260!
test23frfShouldMoveDiagonally
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'frf'.
	self assert: (rover  position) equals: 2@2.
	self assert: (rover  direction) equals: East.! !
!MarsRoverTest methodsFor: 'Errors' stamp: 'gc 10/9/2019 18:17:01' prior: 50727294!
test14InvalidDirectionShouldThrowError
	self should: [ MarsRover at: 1@1 lookingAt: Move.] 
	raise: Error 
	withMessageText: 'El rover debe empezar en una direccion valida'! !
!MarsRoverTest methodsFor: 'Errors' stamp: 'gc 10/9/2019 18:17:12' prior: 50728177!
test21InvalidMoveShouldThrowError
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	self should: [ rover do: 'a'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'! !
!MarsRoverTest methodsFor: 'Errors' stamp: 'gc 10/9/2019 18:17:19' prior: 50728245!
test22ValidMovesWithInvalidMoveShouldThrowErrorAndStayInSamePosition
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	self should: [ rover do: 'ffbarf'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: North.! !

Direction removeSelector: #rotateLeftFrom:!
!Direction class methodsFor: 'nil' stamp: 'gc 10/9/2019 18:18:53'!
left
	self subclassResponsibility 
! !

East class removeSelector: #isEqualTo:!

North class removeSelector: #isEqualTo:!

South class removeSelector: #isEqualTo:!

West class removeSelector: #isEqualTo:!
!East class methodsFor: 'no messages' stamp: 'gc 10/9/2019 18:20:00'!
left
	! !

East removeSelector: #left!

North removeSelector: #left!

South removeSelector: #left!

West removeSelector: #left!
!East class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 18:23:54' prior: 50729166!
left
 	^North	! !
!North class methodsFor: 'no messages' stamp: 'gc 10/9/2019 18:24:13'!
left
 	^West! !
!South class methodsFor: 'nil' stamp: 'gc 10/9/2019 18:24:26'!
left
 	^East! !
!West class methodsFor: 'nil' stamp: 'gc 10/9/2019 18:24:37'!
left
 	^South! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 19:34:00' prior: 50727691!
moveInDirection: aMoveDirection
	direction = North ifTrue: [position _ 0@aMoveDirection + position].
	direction = East ifTrue: [position _ aMoveDirection@0 + position ].
	direction = West ifTrue: [position _ (-1*aMoveDirection)@0 + position ].
	direction = South ifTrue: [position _ 0@(-1*aMoveDirection) + position ].! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 19:35:27' prior: 50727769!
rotateRight 
	direction = North ifTrue: [ ^direction _ #East ].
	direction = East ifTrue: [ ^direction _ #South ].
	direction = South ifTrue: [ ^direction _ #West ].
	direction = West ifTrue: [ ^direction _ #North ]
! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 19:36:08' prior: 50729199!
rotateRight 
	direction = North ifTrue: [ ^direction _ East ].
	direction = East ifTrue: [ ^direction _ South ].
	direction = South ifTrue: [ ^direction _ West ].
	direction = West ifTrue: [ ^direction _ North ]
! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 19:37:13' prior: 50728675!
initilializeAt: aPosition lookingAt: aDirection 
	directions := Direction new.
	directions IsValidDirection: aDirection.
	position := aPosition new.
	direction := aDirection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 19:38:18' prior: 50729219!
initilializeAt: aPosition lookingAt: aDirection 
	directions := Direction new.
	
	directions IsValidDirection: aDirection.
	position := aPosition new.
	direction := aDirection new.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction directions moves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction directions moves'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 19:39:55' prior: 50729228!
initilializeAt: aPosition lookingAt: aDirection 
	directions _ Direction new.
	moves  _ Move new.
	directions IsValidDirection: aDirection.
	position _ aPosition new.
	direction _ aDirection new.! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 19:41:12'!
left
	self subclassResponsibility 
! !

Direction class removeSelector: #left!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 19:42:18' prior: 50728892!
rotateLeft
	^direction _ (direction left) new.
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!East methodsFor: 'nil' stamp: 'gc 10/9/2019 19:42:46'!
left
 	^North! !
!North methodsFor: 'nil' stamp: 'gc 10/9/2019 19:43:12'!
left
 	^West! !
!South methodsFor: 'nil' stamp: 'gc 10/9/2019 19:43:26'!
left
 	^East! !
!West methodsFor: 'nil' stamp: 'gc 10/9/2019 19:43:38'!
left
 	^South! !

East class removeSelector: #left!

North class removeSelector: #left!

South class removeSelector: #left!

West class removeSelector: #left!
!Move methodsFor: 'nil' stamp: 'gc 10/9/2019 19:45:04'!
IsValidMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'Movimientos Invalidos'].! !

Move class removeSelector: #IsValidMove:!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 19:46:45' prior: 50728772!
do: aListOfInstructions 
	aListOfInstructions do: [ :anInstruction | moves IsValidMove: anInstruction ].
	self move: aListOfInstructions ! !

----SNAPSHOT----(9 October 2019 19:51:30) CuisUniversity-3839.image priorSource: 12691874!

----SNAPSHOT----(9 October 2019 19:51:38) CuisUniversity-3839.image priorSource: 12724940!

2 class!
!Move methodsFor: 'nil' stamp: 'gc 10/9/2019 19:52:24'!
CanHandle: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: (aMove class) ].! !
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 19:52:36' prior: 50729289!
IsValidMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: (aMove class) ] ifNone: [self error: 'Movimientos Invalidos'].! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 19:59:51' prior: 50728185!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ moves detectMove: (aListOfInstructions at: instructionNumber).
		
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:04:24' prior: 50729325!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ moves detectMove: (aListOfInstructions at: instructionNumber).
		currentMove execute.
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !

Move removeSelector: #CanHandle:!
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:07:07'!
FindMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: (aMove class) ] ifNone: [self error: 'Movimientos Invalidos'].! !

Move removeSelector: #IsValidMove:!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:07:30' prior: 50729298!
do: aListOfInstructions 
	aListOfInstructions do: [ :anInstruction | moves FindMove: anInstruction ].
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:09:06' prior: 50729347!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (moves FindMove: (aListOfInstructions at: instructionNumber)) new.
		currentMove execute.
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:11:40'!
execute
	self subclassResponsibility ! !
!B methodsFor: 'no messages' stamp: 'gc 10/9/2019 20:11:58'!
execute
	! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:18:54' prior: 50729209!
rotateRight 
	^direction _ (direction left) new.
	"
	direction = North ifTrue: [ ^direction _ East ].
	direction = East ifTrue: [ ^direction _ South ].
	direction = South ifTrue: [ ^direction _ West ].
	direction = West ifTrue: [ ^direction _ North ]
"! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:19:05' prior: 50729417!
rotateRight 
	^direction _ (direction right) new.
	"
	direction = North ifTrue: [ ^direction _ East ].
	direction = East ifTrue: [ ^direction _ South ].
	direction = South ifTrue: [ ^direction _ West ].
	direction = West ifTrue: [ ^direction _ North ]
"! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:20:29'!
right
	self subclassResponsibility 
! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:21:19'!
right
 	^South! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:21:34'!
right
 	^East! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:21:44'!
right
 	^West! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 20:21:58'!
right
 	^North! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:23:29'!
moveForward
	self moveInDirection: 1
! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 20:23:52'!
moveBackward
	self moveInDirection: -1! !

MarsRover removeSelector: #moveLeft!

MarsRover removeSelector: #moveRight!

----SNAPSHOT----(9 October 2019 20:24:10) CuisUniversity-3839.image priorSource: 12725032!
!Direction class methodsFor: 'nil' stamp: 'gc 10/9/2019 22:29:53'!
IsValidDirection: aDirection
	^Direction allSubclasses detect: [:aSubclass| aSubclass = aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !
!Move class methodsFor: 'nil' stamp: 'gc 10/9/2019 22:30:42'!
FindMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: (aMove class) ] ifNone: [self error: 'Movimientos Invalidos'].! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 22:31:42' prior: 50729249!
initilializeAt: aPosition lookingAt: aDirection 
	Direction IsValidDirection: aDirection.
	position _ aPosition new.
	direction _ aDirection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 22:32:27' prior: 50729484!
initilializeAt: aPosition lookingAt: aDirection 
	Direction IsValidDirection: aDirection.
	position _ aPosition new.
	direction _ aDirection new.
	directions! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 22:32:46' prior: 50729492!
initilializeAt: aPosition lookingAt: aDirection 
	Direction IsValidDirection: aDirection.
	position _ aPosition new.
	direction _ aDirection new.
	directions.
	moves.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 22:33:01' prior: 50729500!
initilializeAt: aPosition lookingAt: aDirection 
	Direction IsValidDirection: aDirection.
	position _ aPosition new.
	direction _ aDirection new.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 22:33:30' prior: 50729380!
do: aListOfInstructions 
	aListOfInstructions do: [ :anInstruction | Move FindMove: anInstruction ].
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 22:33:50' prior: 50729387!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		currentMove execute.
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 22:40:34' prior: 50729524!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		currentMove executeDirectionWith: self direction .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 22:42:14' prior: 50729547!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		direction _ currentMove executeDirectionWith: self direction.
		position _ currentMove executePositionWith: self direction and: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:44:10'!
executeDirectionWith: aDirection
	self subclassResponsibility ! !
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:45:33'!
executePositionWith: aDirection and: aPosition ! !
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:46:02' prior: 50729613!
executePositionWith: aDirection and: aPosition 
	self subclassResponsibility ! !

Move removeSelector: #execute!

B removeSelector: #execute!
!B methodsFor: 'no messages' stamp: 'gc 10/9/2019 22:46:37'!
executeDirectionWith: aDirection
	^aDirection ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 22:47:06' prior: 50729571!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		direction _ (currentMove executeDirectionWith: self direction) new.
		position _ (currentMove executePositionWith: self direction and: self position) new .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!F methodsFor: 'no messages' stamp: 'gc 10/9/2019 22:47:24'!
executeDirectionWith: aDirection
	^aDirection ! !
!L methodsFor: 'no messages' stamp: 'gc 10/9/2019 22:47:53'!
executeDirectionWith: aDirection
	^aDirection ! !

Direction removeSelector: #IsValidDirection:!
!L methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:49:16' prior: 50729660!
executeDirectionWith: aDirection
	^ aDirection left! !
!R methodsFor: 'no messages' stamp: 'gc 10/9/2019 22:49:28'!
executeDirectionWith: aDirection
	^ aDirection left! !
!R methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:49:33' prior: 50729670!
executeDirectionWith: aDirection
	^ aDirection right! !
!R methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:50:07'!
executePositionWith: aDirection and: aPosition 
	^aPosition! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 22:50:59' prior: 50729630!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		direction _ (currentMove executeDirectionWith: self direction) new.
		position _ currentMove executePositionWith: self direction and: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!L methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:51:22'!
executePositionWith: aDirection and: aPosition 
	^aPosition! !
!F methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:51:44'!
executePositionWith: aDirection and: aPosition 
	^aPosition! !
!F methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:54:07' prior: 50729715!
executePositionWith: aDirection and: aPosition 
	^aDirection moveInDirection: 1! !
!B methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:54:53'!
executePositionWith: aDirection and: aPosition 
	^aDirection moveInDirection: 1! !
!B methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:54:56' prior: 50729725!
executePositionWith: aDirection and: aPosition 
	^aDirection moveInDirection: -1! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:55:52'!
moveInDirection: aDirection
	self subclassResponsibility 
! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:56:12' prior: 50729737!
moveInDirection: aMoveDirection
	self subclassResponsibility 
! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:56:24'!
moveInDirection: aMoveDirection
	self subclassResponsibility 
! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:58:00' prior: 50729747!
moveInDirection: aMoveDirection
	^ aMoveDirection@0 
! !
!F methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:58:26' prior: 50729720!
executePositionWith: aDirection and: aPosition 
	^aDirection moveInDirection: 1 From: aPosition ! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:58:47'!
moveInDirection: aMoveDirection From: aPosition
	self subclassResponsibility 
! !

Direction removeSelector: #moveInDirection:!
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 22:59:14'!
moveInDirection: aMoveDirection From: aPosition
	^ aMoveDirection@0 
! !

East removeSelector: #moveInDirection:!
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:00:01' prior: 50729770!
moveInDirection: aMoveDirection From: aPosition
	^ aMoveDirection@0 + aPosition 
! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:00:18'!
moveInDirection: aMoveDirection From: aPosition
	^ aMoveDirection@0 + aPosition 
! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:00:43' prior: 50729782!
moveInDirection: aMoveDirection From: aPosition
	^ 0@aMoveDirection + aPosition
! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:01:33'!
moveInDirection: aMoveDirection From: aPosition
	^(-1*aMoveDirection)@0 + aPosition
! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:02:14'!
moveInDirection: aMoveDirection From: aPosition
	^(-1*aMoveDirection)@0 + aPosition
! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:02:32' prior: 50729793!
moveInDirection: aMoveDirection From: aPosition
	^0@(-1*aMoveDirection) + aPosition
! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/9/2019 23:04:36' prior: 50729509!
initilializeAt: aPosition lookingAt: aDirection 
	Direction IsValidDirection: aDirection.
	position _ aPosition.
	direction _ aDirection new.! !

Move removeSelector: #FindMove:!
!Move class methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:11:07' prior: 50729476!
FindMove: aMove
	^Move allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'Movimientos Invalidos'].! !

Collection new!

Collection new!

North  new!
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:18:24' prior: 50729273!
left
 	^North new! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:18:32' prior: 50729443!
right
 	^South new! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:18:41' prior: 50729276!
left
 	^West new! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:18:46' prior: 50729446!
right
 	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:18:52' prior: 50729279!
left
 	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:18:56' prior: 50729449!
right
 	^West new! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:19:03' prior: 50729282!
left
 	^South new! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:19:09' prior: 50729452!
right
 	^North new! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 23:20:00' prior: 50729684!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		direction _ currentMove executeDirectionWith: self direction.
		position _ currentMove executePositionWith: self direction and: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!B methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:21:25' prior: 50729731!
executePositionWith: aDirection and: aPosition 
	^aDirection moveInDirection: -1 With: aPosition! !
!B methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:22:09' prior: 50729887!
executePositionWith: aDirection and: aPosition 
	^aDirection moveInDirection: -1.! !
!Move methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:23:42'!
executePositionWith: aDirection From: aPosition 
	self subclassResponsibility ! !

Move removeSelector: #executePositionWith:and:!
!B methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:24:14'!
executePositionWith: aDirection From: aPosition 
	^aDirection moveInDirection: -1.! !

B removeSelector: #executePositionWith:and:!
!MarsRover methodsFor: 'action' stamp: 'gc 10/9/2019 23:24:26' prior: 50729860!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		direction _ currentMove executeDirectionWith: self direction.
		position _ currentMove executePositionWith: self direction From: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		"
		instructionNumber _ instructionNumber + 1
	]! !
!F methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:24:50'!
executePositionWith: aDirection From: aPosition 
	^aDirection moveInDirection: 1 From: aPosition ! !

F removeSelector: #executePositionWith:and:!
!L methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:25:19'!
executePositionWith: aDirection From: aPosition 
	^aPosition! !

L removeSelector: #executePositionWith:and:!
!R methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:25:41'!
executePositionWith: aDirection From: aPosition 
	^aPosition! !

R removeSelector: #executePositionWith:and:!
!B methodsFor: 'as yet unclassified' stamp: 'gc 10/9/2019 23:26:42' prior: 50729905!
executePositionWith: aDirection From: aPosition 
	^aDirection moveInDirection: -1 From: aPosition.! !
!MarsRoverTest methodsFor: 'Idle' stamp: 'gc 10/9/2019 23:28:44' prior: 50728903!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: North.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: North.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'Idle' stamp: 'gc 10/9/2019 23:29:03' prior: 50728943!
test05fbEndsInStartingPoint
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'fb'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover direction) equals: North.! !
!MarsRoverTest methodsFor: 'Idle' stamp: 'gc 10/9/2019 23:30:38' prior: 50729964!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: North.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction) equals: North new.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'Idle' stamp: 'gc 10/9/2019 23:31:01' prior: 50729986!
test00NoInstructionStaysInPositionAndDirection
	| rover |
	rover _ MarsRover at: 1@1 lookingAt: North.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: North.
	
	"Enunciado Mars Rover:
		f --> forward
		b --> backward
		r --> rotate right
		l --> rotate left
	"! !
!MarsRoverTest methodsFor: 'Basic Backward' stamp: 'gc 10/9/2019 23:31:13' prior: 50728934!
test02bShouldMoveBackward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Backward' stamp: 'gc 10/9/2019 23:31:22' prior: 50728952!
test04NbsShouldMoveBackwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'bbb'.
	self assert: (rover  position) equals: 1@-2.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Forward' stamp: 'gc 10/9/2019 23:31:33' prior: 50728916!
test01fShouldMoveForward
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Forward' stamp: 'gc 10/9/2019 23:31:39' prior: 50728962!
test03NfsShouldMoveForwardNTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'fff'.
	self assert: (rover  position) equals: 1@4.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 23:31:51' prior: 50728972!
test06rShouldRotateRight
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'r'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: East.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 23:32:07' prior: 50728990!
test07rrShouldRotateRightTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: South.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 23:32:15' prior: 50728999!
test08rrrShouldRotateRightThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: West.! !
!MarsRoverTest methodsFor: 'Basic Right' stamp: 'gc 10/9/2019 23:32:23' prior: 50729009!
test09rrrrEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'rrrr'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 23:32:32' prior: 50729019!
test10lShouldRotateLeft
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'l'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: West.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 23:32:39' prior: 50729028!
test11llShouldRotateLeftTwice
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: South.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 23:32:50' prior: 50729037!
test12lllShouldRotateLeftThreeTimes
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'lll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: East.! !
!MarsRoverTest methodsFor: 'Basic Left' stamp: 'gc 10/9/2019 23:32:58' prior: 50729047!
test13llllEndsInStartingDirection
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'llll'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Forward with directions' stamp: 'gc 10/9/2019 23:33:14' prior: 50729057!
test15fLookingEastShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: East.
	rover do: 'f'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction class) equals: East.! !
!MarsRoverTest methodsFor: 'Forward with directions' stamp: 'gc 10/9/2019 23:33:22' prior: 50729067!
test16fLookingWestShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: West.
	rover do: 'f'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction class) equals: West.! !
!MarsRoverTest methodsFor: 'Forward with directions' stamp: 'gc 10/9/2019 23:33:30' prior: 50729077!
test17fLookingSouthShouldMoveSouth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: South.
	rover do: 'f'.
	self assert: (rover  position) equals: 1@0.
	self assert: (rover  direction class) equals: South.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 23:33:45' prior: 50729087!
test18bLookingEastShouldMoveWest
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: East.
	rover do: 'b'.
	self assert: (rover  position) equals: 0@1.
	self assert: (rover  direction class) equals: East.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 23:33:50' prior: 50729097!
test19bLookingWestShouldMoveEast
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: West.
	rover do: 'b'.
	self assert: (rover  position) equals: 2@1.
	self assert: (rover  direction class) equals: West.! !
!MarsRoverTest methodsFor: 'Backward with directions' stamp: 'gc 10/9/2019 23:33:57' prior: 50729107!
test20bLookingSouthShouldMoveNorth
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: South.
	rover do: 'b'.
	self assert: (rover  position) equals: 1@2.
	self assert: (rover  direction class) equals: South.! !
!MarsRoverTest methodsFor: 'Various Movements' stamp: 'gc 10/9/2019 23:34:12' prior: 50729977!
test05fbEndsInStartingPoint
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'fb'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Various Movements' stamp: 'gc 10/9/2019 23:34:18' prior: 50729116!
test23frfShouldMoveDiagonally
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'frf'.
	self assert: (rover  position) equals: 2@2.
	self assert: (rover  direction class) equals: East.! !
!MarsRoverTest methodsFor: 'Errors' stamp: 'gc 10/9/2019 23:35:20' prior: 50729143!
test22ValidMovesWithInvalidMoveShouldThrowErrorAndStayInSamePosition
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	self should: [ rover do: 'ffbarf'] 
	raise: Error 
	withMessageText: 'Movimientos Invalidos'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: North.! !
!MarsRoverTest methodsFor: 'Various Movements' stamp: 'gc 10/9/2019 23:36:27'!
test24Roundabout
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'frf'.
	self assert: (rover  position) equals: 2@2.
	self assert: (rover  direction class) equals: East.! !
!MarsRoverTest methodsFor: 'Various Movements' stamp: 'gc 10/9/2019 23:38:04' prior: 50730221!
test24Roundabout
	|rover|
	rover _ MarsRover at: 1@1 lookingAt: North.
	rover do: 'frfrfrf'.
	self assert: (rover  position) equals: 1@1.
	self assert: (rover  direction class) equals: West.! !

----SNAPSHOT----(9 October 2019 23:38:42) CuisUniversity-3839.image priorSource: 12730070!

----SNAPSHOT----(9 October 2019 23:52:01) CuisUniversity-3839.image priorSource: 12754817!

----QUIT----(9 October 2019 23:52:08) CuisUniversity-3839.image priorSource: 12754909!

----STARTUP---- (10 October 2019 15:58:07) as /home/gzeitoune/Documents/UBA/ingSoft1/ing-soft-1/CuisUniversity-3839.image!


----SNAPSHOT----(10 October 2019 16:00:12) CuisUniversity-3839.image priorSource: 12755001!
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:01:18' prior: 50729912!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		"direction _ currentMove executeDirectionWith: self direction.
		position _ currentMove executePositionWith: self direction From: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveLeft ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveRight ].
		
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:01:39' prior: 50729263!
rotateLeft
	"^direction _ (direction left) new.
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North].! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:01:48' prior: 50729428!
rotateRight 
"	^direction _ (direction right) new.
	"
	direction = North ifTrue: [ ^direction _ East ].
	direction = East ifTrue: [ ^direction _ South ].
	direction = South ifTrue: [ ^direction _ West ].
	direction = West ifTrue: [ ^direction _ North ]
! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:02:40' prior: 50730254!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		"direction _ currentMove executeDirectionWith: self direction.
		position _ currentMove executePositionWith: self direction From: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveForward ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveBackward ].
		
		instructionNumber _ instructionNumber + 1
	]! !
!Direction methodsFor: 'nil' stamp: 'gc 10/10/2019 16:06:18'!
moveForward
	^self subclassResponsibility ! !
!Direction methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:06:57'!
moveForwardFrom: aPosition
	^self subclassResponsibility ! !

Direction removeSelector: #moveForward!
!Direction methodsFor: 'nil' stamp: 'gc 10/10/2019 16:07:12'!
moveBackwardFrom: aPosition
	^self subclassResponsibility ! !
!East methodsFor: 'nil' stamp: 'gc 10/10/2019 16:07:37'!
moveForwardFrom: aPosition
	^aPosition + 0@1! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:07:46'!
moveBackwardFrom: aPosition
	^aPosition + 0@-1! !
!North methodsFor: 'nil' stamp: 'gc 10/10/2019 16:08:13'!
moveForwardFrom: aPosition
	^aPosition + 0@1! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:08:20' prior: 50730343!
moveForwardFrom: aPosition
	^aPosition + 1@0! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:08:27' prior: 50730347!
moveBackwardFrom: aPosition
	^aPosition + -1@0! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:08:39'!
moveBackwardFrom: aPosition
	^aPosition + 0@-1! !
!South methodsFor: 'nil' stamp: 'gc 10/10/2019 16:08:52'!
moveForwardFrom: aPosition
	^aPosition + 0@-1! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:08:57'!
moveBackwardFrom: aPosition
	^aPosition + 0@1! !
!West methodsFor: 'nil' stamp: 'gc 10/10/2019 16:09:15'!
moveForwardFrom: aPosition
	^aPosition + -1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:09:26'!
moveBackwardFrom: aPosition
	^aPosition + 1@0! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:10:39' prior: 50729455!
moveForward
	direction moveForwardFrom: position 
! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:10:51' prior: 50729459!
moveBackward
	direction moveBackwardFrom: position ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:11:12' prior: 50730391!
moveBackward
	position _ direction moveBackwardFrom: position ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:11:18' prior: 50730386!
moveForward
	position _ direction moveForwardFrom: position 
! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:12:40' prior: 50730361!
moveBackwardFrom: aPosition
	^ -1@0 + aPosition! !
!East methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:12:47' prior: 50730356!
moveForwardFrom: aPosition
	^ 1@0 + aPosition! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:12:57' prior: 50730365!
moveBackwardFrom: aPosition
	^ 0@-1 + aPosition! !
!North methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:13:06' prior: 50730351!
moveForwardFrom: aPosition
	^0@1 + aPosition! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:13:15' prior: 50730373!
moveBackwardFrom: aPosition
	^0@1 + aPosition! !
!South methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:13:27' prior: 50730369!
moveForwardFrom: aPosition
	^ 0@-1 + aPosition! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:13:34' prior: 50730381!
moveBackwardFrom: aPosition
	^ 1@0  + aPosition! !
!West methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:13:40' prior: 50730377!
moveForwardFrom: aPosition
	^-1@0  + aPosition! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:15:20' prior: 50730281!
rotateLeft
	^direction _ (direction left) new.
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:15:48' prior: 50730446!
rotateLeft
	^direction _ direction left.
	"direction = #North ifTrue: [^direction _ #West].  
	direction = #West ifTrue: [^direction _ #South].
	direction = #South ifTrue: [^direction _ #East].
	direction = #East ifTrue: [^direction _ #North]."! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:16:00' prior: 50730292!
rotateRight 
	^direction _ direction right.
	"
	direction = North ifTrue: [ ^direction _ East ].
	direction = East ifTrue: [ ^direction _ South ].
	direction = South ifTrue: [ ^direction _ West ].
	direction = West ifTrue: [ ^direction _ North ]"
! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:17:08' prior: 50730303!
move: aListOfInstructions 
	| instructionNumber currentMove| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		"currentMove _ (Move FindMove: (aListOfInstructions at: instructionNumber)) new.
		direction _ currentMove executeDirectionWith: self direction.
		position _ currentMove executePositionWith: self direction From: self position .
		"
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveForward ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveBackward ].
		
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:21:37' prior: 50729517!
do: aListOfInstructions 
	(aListOfInstructions detect: [:instruction | (self isValidMove: instruction) not] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos'].
	aListOfInstructions do: [ :anInstruction | Move FindMove: anInstruction ].
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'nil' stamp: 'gc 10/10/2019 16:22:59'!
isValidMove: aMove
	|validMoves|
	validMoves  _ Set withAll: ($f, $r, $l, $b).
	^validMoves includes: aMove ! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:23:25' prior: 50730506!
do: aListOfInstructions 
	(aListOfInstructions detect: [:instruction | (self isValidMove: instruction) not] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos'].
	"aListOfInstructions do: [ :anInstruction | Move FindMove: anInstruction ]."
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:24:30' prior: 50730517!
isValidMove: aMove
	|validMoves|
	validMoves  _ Set withAll: #($f $r  $l  $b).
	^validMoves includes: aMove ! !

----SNAPSHOT----(10 October 2019 16:25:08) CuisUniversity-3839.image priorSource: 12755214!

MarsRover removeSelector: #moveInDirection:!
!MarsRoverTest methodsFor: 'Error' stamp: 'gc 10/10/2019 16:26:53' prior: 50729125!
test14InvalidDirectionShouldThrowError
	self should: [ MarsRover at: 1@1 lookingAt: Direction .] 
	raise: Error 
	withMessageText: 'El rover debe empezar en una direccion valida'! !
!Moveaadsngsdl class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:27:23' prior: 50729819!
FindMove: aMove
	^Moveaadsngsdl allSubclasses detect: [:aSubclass| aSubclass isEqualTo: aMove ] ifNone: [self error: 'Movimientos Invalidos'].! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:27:53' prior: 50359918!
example1
"
	self example1
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:27:54' prior: 50360053!
example11
"
	self example11
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:27:54' prior: 50359985!
example10
"
	self example10 openInWorld
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:27:54' prior: 50360170!
example1b
"
Based on #example1, but using some Morph instead of RectangleLikeMorph -> extent is not adjustable
	self example1b
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (Morph new name: #B);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Morph new name: #G);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (Morph new name: #J);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:21' prior: 50730564!
example1
"
	self example1
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Bdgmsl)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:21' prior: 50360231!
example2
	"
	self example2
	"
	| pane row |
	pane _ (LayoutMorph newColumn separation: 5)	name: #example2.
	pane color: Color red.
	row _ (LayoutMorph newRow separation: 5) name: #Row.
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #A)
			layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8 minorDirectionPadding: #bottom);
		addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #Bdgmsl)
			layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 40 minorDirectionPadding: #top);
		addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #C)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 0.7 minorDirectionPadding: #center).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane morphPosition: 200@180 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:21' prior: 50730701!
example10
"
	self example10 openInWorld
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Bdgmsl)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:21' prior: 50730631!
example11
"
	self example11
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Bdgmsl)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:21' prior: 50730770!
example1b
"
Based on #example1, but using some Morph instead of RectangleLikeMorph -> extent is not adjustable
	self example1b
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (Morph new name: #Bdgmsl);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Morph new name: #G);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (Morph new name: #J);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:37' prior: 50730831!
example1
"
	self example1
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Bdgmsl)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Ladad)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:37' prior: 50360263!
example20
"
	self example20
"
| column |

column _ (LayoutMorph newColumn separation: 5) name: #Column.
column
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 20);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec fixedWidth: 40 proportionalHeight: 0.5);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Ladad)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 30).
column morphPosition: 150@130 extent: 400@300.
column openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:37' prior: 50730930!
example10
"
	self example10 openInWorld
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Bdgmsl)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Ladad)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:37' prior: 50730999!
example11
"
	self example11
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Bdgmsl)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Ladad)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:28:37' prior: 50731069!
example1b
"
Based on #example1, but using some Morph instead of RectangleLikeMorph -> extent is not adjustable
	self example1b
"
| pane row |
pane _ (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row _ LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (Morph new name: #Bdgmsl);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BorderedRectMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BorderedRectMorph new color: (Color blue); name: #Fsdg)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Morph new name: #G);
	addMorph: (BorderedRectMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row _ (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (Morph new name: #J);
	addMorph: (BorderedRectMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BorderedRectMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Ladad)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane morphPosition: 150@130 extent: 400@300.
pane openInWorld! !

----SNAPSHOT----(10 October 2019 16:29:32) CuisUniversity-3839.image priorSource: 12764527!
!Direction methodsFor: 'rotate' stamp: 'gc 10/10/2019 16:29:38' prior: 50729258!
left
	^self subclassResponsibility 
! !

Direction removeSelector: #moveInDirection:From:!

East removeSelector: #moveInDirection:From:!

North removeSelector: #moveInDirection:From:!

South removeSelector: #moveInDirection:From:!

West removeSelector: #moveInDirection:From:!
!Direction methodsFor: 'rotate' stamp: 'gc 10/10/2019 16:31:17' prior: 50729439!
right
	^self subclassResponsibility 
! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:31:48' prior: 50730524!
do: aListOfInstructions 
	(aListOfInstructions detect: [:instruction | (self isValidMove: instruction) not] ifNone: []) ifNotNil: [^self error: 'Movimientos Invalidos'].
	self move: aListOfInstructions ! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/10/2019 16:32:21' prior: 50729810!
initilializeAt: aPosition lookingAt: aDirection 
	"Direction IsValidDirection: aDirection."
	position _ aPosition.
	direction _ aDirection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/10/2019 16:32:48' prior: 50731451!
initilializeAt: aPosition lookingAt: aDirection 
	Direction isValidDirection: aDirection.
	position _ aPosition.
	direction _ aDirection new.! !
!Direction class methodsFor: 'as yet unclassified' stamp: 'gc 10/10/2019 16:33:12'!
isValidDirection: aDirection
	^Direction allSubclasses detect: [:aSubclass| aSubclass = aDirection] ifNone: [self error: 'El rover debe empezar en una direccion valida'].! !

Direction class removeSelector: #IsValidDirection:!
!MarsRover methodsFor: 'initialization' stamp: 'gc 10/10/2019 16:34:14' prior: 50731459!
initilializeAt: aPosition lookingAt: aDirection 
	Direction isValidDirection: aDirection.
	position _ aPosition.
	direction _ aDirection new.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:34:31' prior: 50730479!
move: aListOfInstructions 
	| instructionNumber| 
	instructionNumber _ 1.
	[instructionNumber <= aListOfInstructions size] whileTrue: [
		(aListOfInstructions at: instructionNumber ) = $r ifTrue: [ self rotateRight ].
		(aListOfInstructions at: instructionNumber ) = $l ifTrue: [ self rotateLeft ].
		(aListOfInstructions at: instructionNumber ) = $f ifTrue: [ self moveForward ].
		(aListOfInstructions at: instructionNumber ) = $b ifTrue: [ self moveBackward ].
		
		instructionNumber _ instructionNumber + 1
	]! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:34:45' prior: 50730457!
rotateLeft
	^direction _ direction left.! !
!MarsRover methodsFor: 'action' stamp: 'gc 10/10/2019 16:34:51' prior: 50730468!
rotateRight 
	^direction _ direction right.! !

----SNAPSHOT----(10 October 2019 16:35:29) CuisUniversity-3839.image priorSource: 12792666!